"""
    Sendbird Platform SDK

    Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from sendbird-platform-sdk.api_client import ApiClient, Endpoint as _Endpoint
from sendbird-platform-sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from sendbird-platform-sdk.model.inline_response20070 import InlineResponse20070
from sendbird-platform-sdk.model.inline_response20071 import InlineResponse20071
from sendbird-platform-sdk.model.inline_response20071_report_logs import InlineResponse20071ReportLogs
from sendbird-platform-sdk.model.report_channel_by_url_data import ReportChannelByUrlData
from sendbird-platform-sdk.model.report_message_by_id_data import ReportMessageByIdData
from sendbird-platform-sdk.model.report_user_by_id_data import ReportUserByIdData


class ReportContentSubjectApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.list_reports_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20070,),
                'auth': [],
                'endpoint_path': '/v3/report',
                'operation_id': 'list_reports',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'api_token',
                    'token',
                    'limit',
                    'start_ts',
                    'end_ts',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'api_token':
                        (str,),
                    'token':
                        (str,),
                    'limit':
                        (int,),
                    'start_ts':
                        (int,),
                    'end_ts':
                        (int,),
                },
                'attribute_map': {
                    'api_token': 'Api-Token',
                    'token': 'token',
                    'limit': 'limit',
                    'start_ts': 'start_ts',
                    'end_ts': 'end_ts',
                },
                'location_map': {
                    'api_token': 'header',
                    'token': 'query',
                    'limit': 'query',
                    'start_ts': 'query',
                    'end_ts': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_reports_on_channel_by_url_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20071,),
                'auth': [],
                'endpoint_path': '/v3/report/{channel_type}/{channel_url}',
                'operation_id': 'list_reports_on_channel_by_url',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'api_token',
                    'token',
                    'limit',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'api_token':
                        (str,),
                    'token':
                        (str,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'api_token': 'Api-Token',
                    'token': 'token',
                    'limit': 'limit',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'api_token': 'header',
                    'token': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_reports_on_message_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20071,),
                'auth': [],
                'endpoint_path': '/v3/report/{channel_type}/{channel_url}/messages/{message_id}',
                'operation_id': 'list_reports_on_message_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                    'api_token',
                    'token',
                    'limit',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_id':
                        (str,),
                    'api_token':
                        (str,),
                    'token':
                        (str,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_id': 'message_id',
                    'api_token': 'Api-Token',
                    'token': 'token',
                    'limit': 'limit',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_id': 'path',
                    'api_token': 'header',
                    'token': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_reports_on_user_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20071,),
                'auth': [],
                'endpoint_path': '/v3/report/users/{offending_user_id}',
                'operation_id': 'list_reports_on_user_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'offending_user_id',
                    'api_token',
                    'token',
                    'limit',
                ],
                'required': [
                    'offending_user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'offending_user_id':
                        (str,),
                    'api_token':
                        (str,),
                    'token':
                        (str,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'offending_user_id': 'offending_user_id',
                    'api_token': 'Api-Token',
                    'token': 'token',
                    'limit': 'limit',
                },
                'location_map': {
                    'offending_user_id': 'path',
                    'api_token': 'header',
                    'token': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.report_channel_by_url_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20071ReportLogs,),
                'auth': [],
                'endpoint_path': '/v3/report/{channel_type}/{channel_url}',
                'operation_id': 'report_channel_by_url',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'api_token',
                    'report_channel_by_url_data',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'api_token':
                        (str,),
                    'report_channel_by_url_data':
                        (ReportChannelByUrlData,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'api_token': 'header',
                    'report_channel_by_url_data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.report_message_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20071ReportLogs,),
                'auth': [],
                'endpoint_path': '/v3/report/{channel_type}/{channel_url}/messages/{message_id}',
                'operation_id': 'report_message_by_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                    'api_token',
                    'report_message_by_id_data',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_id':
                        (str,),
                    'api_token':
                        (str,),
                    'report_message_by_id_data':
                        (ReportMessageByIdData,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_id': 'message_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_id': 'path',
                    'api_token': 'header',
                    'report_message_by_id_data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.report_user_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20071ReportLogs,),
                'auth': [],
                'endpoint_path': '/v3/report/users/{offending_user_id}',
                'operation_id': 'report_user_by_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'offending_user_id',
                    'api_token',
                    'report_user_by_id_data',
                ],
                'required': [
                    'offending_user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'offending_user_id':
                        (str,),
                    'api_token':
                        (str,),
                    'report_user_by_id_data':
                        (ReportUserByIdData,),
                },
                'attribute_map': {
                    'offending_user_id': 'offending_user_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'offending_user_id': 'path',
                    'api_token': 'header',
                    'report_user_by_id_data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.view_moderated_message_by_id_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (str,)},),
                'auth': [],
                'endpoint_path': '/v3/report/{channel_type}/{channel_url}/profanity_messages/{message_id}',
                'operation_id': 'view_moderated_message_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                    'api_token',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_id':
                        (str,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_id': 'message_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_id': 'path',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def list_reports(
        self,
        **kwargs
    ):
        """List reports  # noqa: E501

        ## List reports  Retrieves a list of reports within an application regardless of object types.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_reports(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            api_token (str): [optional]
            token (str): [optional]
            limit (int): [optional]
            start_ts (int): [optional]
            end_ts (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20070
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_reports_endpoint.call_with_http_info(**kwargs)

    def list_reports_on_channel_by_url(
        self,
        channel_type,
        channel_url,
        **kwargs
    ):
        """List reports on a channel  # noqa: E501

        ## List reports on a channel  Retrieves a list of reports on a channel that has offensive messages or abusive activities.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-channel ----------------------------   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel which is reported for offensive messages or inappropriate activities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_reports_on_channel_by_url(channel_type, channel_url, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str):
            channel_url (str):

        Keyword Args:
            api_token (str): [optional]
            token (str): [optional]
            limit (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20071
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        return self.list_reports_on_channel_by_url_endpoint.call_with_http_info(**kwargs)

    def list_reports_on_message_by_id(
        self,
        channel_type,
        channel_url,
        message_id,
        **kwargs
    ):
        """List reports on a message  # noqa: E501

        ## List reports on a message  Retrieves a list of reports on a message which contains suspicious, harassing, or inappropriate content.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-message ----------------------------   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel where the reported message is in.  `message_id`      Type: string      Description: Specifies the unique ID of the reported message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_reports_on_message_by_id(channel_type, channel_url, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str):
            channel_url (str):
            message_id (str):

        Keyword Args:
            api_token (str): [optional]
            token (str): [optional]
            limit (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20071
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_id'] = \
            message_id
        return self.list_reports_on_message_by_id_endpoint.call_with_http_info(**kwargs)

    def list_reports_on_user_by_id(
        self,
        offending_user_id,
        **kwargs
    ):
        """List reports on a user  # noqa: E501

        ## List reports on a user  Retrieves a list of reports on a user who sends an offensive message.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-user ----------------------------   `offending_user_id`      Type: string      Description: Specifies the unique ID of the user who has sent the message to report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_reports_on_user_by_id(offending_user_id, async_req=True)
        >>> result = thread.get()

        Args:
            offending_user_id (str):

        Keyword Args:
            api_token (str): [optional]
            token (str): [optional]
            limit (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20071
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['offending_user_id'] = \
            offending_user_id
        return self.list_reports_on_user_by_id_endpoint.call_with_http_info(**kwargs)

    def report_channel_by_url(
        self,
        channel_type,
        channel_url,
        **kwargs
    ):
        """Report a channel  # noqa: E501

        ## Report a channel  Reports a channel that has offensive messages or abusive activities.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-channel ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.report_channel_by_url(channel_type, channel_url, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str):
            channel_url (str):

        Keyword Args:
            api_token (str): [optional]
            report_channel_by_url_data (ReportChannelByUrlData): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20071ReportLogs
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        return self.report_channel_by_url_endpoint.call_with_http_info(**kwargs)

    def report_message_by_id(
        self,
        channel_type,
        channel_url,
        message_id,
        **kwargs
    ):
        """Report a message  # noqa: E501

        ## Report a message  Reports a message which contains suspicious, harassing, or inappropriate content.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-message ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.report_message_by_id(channel_type, channel_url, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str):
            channel_url (str):
            message_id (str):

        Keyword Args:
            api_token (str): [optional]
            report_message_by_id_data (ReportMessageByIdData): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20071ReportLogs
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_id'] = \
            message_id
        return self.report_message_by_id_endpoint.call_with_http_info(**kwargs)

    def report_user_by_id(
        self,
        offending_user_id,
        **kwargs
    ):
        """Report a user  # noqa: E501

        ## Report a user  Reports a user who sends an offensive message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-user ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.report_user_by_id(offending_user_id, async_req=True)
        >>> result = thread.get()

        Args:
            offending_user_id (str):

        Keyword Args:
            api_token (str): [optional]
            report_user_by_id_data (ReportUserByIdData): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20071ReportLogs
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['offending_user_id'] = \
            offending_user_id
        return self.report_user_by_id_endpoint.call_with_http_info(**kwargs)

    def view_moderated_message_by_id(
        self,
        channel_type,
        channel_url,
        message_id,
        **kwargs
    ):
        """View a moderated message  # noqa: E501

        ## View a moderated message  Retrieves information on a message that has been moderated by the [profanity filter](https://sendbird.com/docs/chat/v3/platform-api/guides/filter-and-moderation#2-profanity-filter).  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-view-a-moderated-message ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.view_moderated_message_by_id(channel_type, channel_url, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str):
            channel_url (str):
            message_id (str):

        Keyword Args:
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            {str: (str,)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_id'] = \
            message_id
        return self.view_moderated_message_by_id_endpoint.call_with_http_info(**kwargs)

