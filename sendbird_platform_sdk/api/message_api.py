"""
    Sendbird Platform SDK

    Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@sendbird.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from sendbird_platform_sdk.api_client import ApiClient, Endpoint as _Endpoint
from sendbird_platform_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from sendbird_platform_sdk.model.add_extra_data_to_a_message_request import AddExtraDataToAMessageRequest
from sendbird_platform_sdk.model.add_extra_data_to_a_message_response import AddExtraDataToAMessageResponse
from sendbird_platform_sdk.model.get_total_number_of_messages_in_a_channel_response import GetTotalNumberOfMessagesInAChannelResponse
from sendbird_platform_sdk.model.list_messages_response import ListMessagesResponse
from sendbird_platform_sdk.model.mark_channel_messages_as_read_request import MarkChannelMessagesAsReadRequest
from sendbird_platform_sdk.model.migrate_messages_request import MigrateMessagesRequest
from sendbird_platform_sdk.model.send_a_message_request import SendAMessageRequest
from sendbird_platform_sdk.model.sendbird_message_response import SendbirdMessageResponse
from sendbird_platform_sdk.model.update_a_message_request import UpdateAMessageRequest
from sendbird_platform_sdk.model.update_extra_data_in_a_message_request import UpdateExtraDataInAMessageRequest
from sendbird_platform_sdk.model.update_extra_data_in_a_message_response import UpdateExtraDataInAMessageResponse


class MessageApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_extra_data_to_a_message_endpoint = _Endpoint(
            settings={
                'response_type': (AddExtraDataToAMessageResponse,),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray',
                'operation_id': 'add_extra_data_to_a_message',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                    'api_token',
                    'add_extra_data_to_a_message_request',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'channel_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('channel_type',): {

                        "OPEN_CHANNELS": "open_channels",
                        "GROUP_CHANNELS": "group_channels"
                    },
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_id':
                        (str,),
                    'api_token':
                        (str,),
                    'add_extra_data_to_a_message_request':
                        (AddExtraDataToAMessageRequest,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_id': 'message_id',
                    'api_token': 'api-token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_id': 'path',
                    'api_token': 'header',
                    'add_extra_data_to_a_message_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_a_message_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages/{message_id}',
                'operation_id': 'delete_a_message',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                    'api_token',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'channel_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('channel_type',): {

                        "OPEN_CHANNELS": "open_channels",
                        "GROUP_CHANNELS": "group_channels"
                    },
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_id':
                        (str,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_id': 'message_id',
                    'api_token': 'api-token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_id': 'path',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_a_message_endpoint = _Endpoint(
            settings={
                'response_type': (SendbirdMessageResponse,),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages/{message_id}',
                'operation_id': 'get_a_message',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                    'include_reactions',
                    'include_thread_info',
                    'include_parent_message_info',
                    'include_poll_details',
                    'with_sorted_meta_array',
                    'api_token',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'channel_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('channel_type',): {

                        "OPEN_CHANNELS": "open_channels",
                        "GROUP_CHANNELS": "group_channels"
                    },
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_id':
                        (str,),
                    'include_reactions':
                        (bool,),
                    'include_thread_info':
                        (bool,),
                    'include_parent_message_info':
                        (bool,),
                    'include_poll_details':
                        (bool,),
                    'with_sorted_meta_array':
                        (bool,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_id': 'message_id',
                    'include_reactions': 'include_reactions',
                    'include_thread_info': 'include_thread_info',
                    'include_parent_message_info': 'include_parent_message_info',
                    'include_poll_details': 'include_poll_details',
                    'with_sorted_meta_array': 'with_sorted_meta_array',
                    'api_token': 'api-token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_id': 'path',
                    'include_reactions': 'query',
                    'include_thread_info': 'query',
                    'include_parent_message_info': 'query',
                    'include_poll_details': 'query',
                    'with_sorted_meta_array': 'query',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_total_number_of_messages_in_a_channel_endpoint = _Endpoint(
            settings={
                'response_type': (GetTotalNumberOfMessagesInAChannelResponse,),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages/total_count',
                'operation_id': 'get_total_number_of_messages_in_a_channel',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'api_token',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                ],
                'nullable': [
                ],
                'enum': [
                    'channel_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('channel_type',): {

                        "OPEN_CHANNELS": "open_channels",
                        "GROUP_CHANNELS": "group_channels"
                    },
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'api_token': 'api-token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_messages_endpoint = _Endpoint(
            settings={
                'response_type': (ListMessagesResponse,),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages',
                'operation_id': 'list_messages',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_ts',
                    'message_id',
                    'prev_limit',
                    'next_limit',
                    'include',
                    'reverse',
                    'sender_id',
                    'sender_ids',
                    'operator_filter',
                    'custom_types',
                    'message_type',
                    'including_removed',
                    'include_reactions',
                    'include_reply_type',
                    'include_parent_message_info',
                    'include_thread_info',
                    'include_poll_details',
                    'with_sorted_meta_array',
                    'show_subchannel_messages_only',
                    'user_id',
                    'api_token',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_ts',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'channel_type',
                    'operator_filter',
                    'message_type',
                    'include_reply_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('channel_type',): {

                        "OPEN_CHANNELS": "open_channels",
                        "GROUP_CHANNELS": "group_channels"
                    },
                    ('operator_filter',): {

                        "ALL": "all",
                        "OPERATOR": "operator",
                        "NONOPERATOR": "nonoperator"
                    },
                    ('message_type',): {

                        "MESG": "MESG",
                        "FILE": "FILE",
                        "ADMM": "ADMM"
                    },
                    ('include_reply_type',): {

                        "NONE": "NONE",
                        "ALL": "ALL",
                        "ONLY_REPLY_TO_CHANNEL": "ONLY_REPLY_TO_CHANNEL"
                    },
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_ts':
                        (int,),
                    'message_id':
                        (int,),
                    'prev_limit':
                        (int,),
                    'next_limit':
                        (int,),
                    'include':
                        (bool,),
                    'reverse':
                        (bool,),
                    'sender_id':
                        (str,),
                    'sender_ids':
                        (str,),
                    'operator_filter':
                        (str,),
                    'custom_types':
                        (str,),
                    'message_type':
                        (str,),
                    'including_removed':
                        (bool,),
                    'include_reactions':
                        (bool,),
                    'include_reply_type':
                        (str,),
                    'include_parent_message_info':
                        (bool,),
                    'include_thread_info':
                        (bool,),
                    'include_poll_details':
                        (bool,),
                    'with_sorted_meta_array':
                        (bool,),
                    'show_subchannel_messages_only':
                        (bool,),
                    'user_id':
                        (str,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_ts': 'message_ts',
                    'message_id': 'message_id',
                    'prev_limit': 'prev_limit',
                    'next_limit': 'next_limit',
                    'include': 'include',
                    'reverse': 'reverse',
                    'sender_id': 'sender_id',
                    'sender_ids': 'sender_ids',
                    'operator_filter': 'operator_filter',
                    'custom_types': 'custom_types',
                    'message_type': 'message_type',
                    'including_removed': 'including_removed',
                    'include_reactions': 'include_reactions',
                    'include_reply_type': 'include_reply_type',
                    'include_parent_message_info': 'include_parent_message_info',
                    'include_thread_info': 'include_thread_info',
                    'include_poll_details': 'include_poll_details',
                    'with_sorted_meta_array': 'with_sorted_meta_array',
                    'show_subchannel_messages_only': 'show_subchannel_messages_only',
                    'user_id': 'user_id',
                    'api_token': 'api-token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_ts': 'query',
                    'message_id': 'query',
                    'prev_limit': 'query',
                    'next_limit': 'query',
                    'include': 'query',
                    'reverse': 'query',
                    'sender_id': 'query',
                    'sender_ids': 'query',
                    'operator_filter': 'query',
                    'custom_types': 'query',
                    'message_type': 'query',
                    'including_removed': 'query',
                    'include_reactions': 'query',
                    'include_reply_type': 'query',
                    'include_parent_message_info': 'query',
                    'include_thread_info': 'query',
                    'include_poll_details': 'query',
                    'with_sorted_meta_array': 'query',
                    'show_subchannel_messages_only': 'query',
                    'user_id': 'query',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.mark_channel_messages_as_read_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/v3/group_channels/{channel_url}/messages/mark_as_read',
                'operation_id': 'mark_channel_messages_as_read',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_url',
                    'api_token',
                    'mark_channel_messages_as_read_request',
                ],
                'required': [
                    'channel_url',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_url':
                        (str,),
                    'api_token':
                        (str,),
                    'mark_channel_messages_as_read_request':
                        (MarkChannelMessagesAsReadRequest,),
                },
                'attribute_map': {
                    'channel_url': 'channel_url',
                    'api_token': 'api-token',
                },
                'location_map': {
                    'channel_url': 'path',
                    'api_token': 'header',
                    'mark_channel_messages_as_read_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.migrate_messages_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/v3/migration/{target_channel_url}',
                'operation_id': 'migrate_messages',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'target_channel_url',
                    'api_token',
                    'migrate_messages_request',
                ],
                'required': [
                    'target_channel_url',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'target_channel_url':
                        (str,),
                    'api_token':
                        (str,),
                    'migrate_messages_request':
                        (MigrateMessagesRequest,),
                },
                'attribute_map': {
                    'target_channel_url': 'target_channel_url',
                    'api_token': 'api-token',
                },
                'location_map': {
                    'target_channel_url': 'path',
                    'api_token': 'header',
                    'migrate_messages_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.remove_extra_data_from_a_message_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray',
                'operation_id': 'remove_extra_data_from_a_message',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                    'keys',
                    'api_token',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'channel_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('channel_type',): {

                        "OPEN_CHANNELS": "open_channels",
                        "GROUP_CHANNELS": "group_channels"
                    },
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_id':
                        (str,),
                    'keys':
                        (str,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_id': 'message_id',
                    'keys': 'keys',
                    'api_token': 'api-token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_id': 'path',
                    'keys': 'query',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.send_a_message_endpoint = _Endpoint(
            settings={
                'response_type': (SendbirdMessageResponse,),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages',
                'operation_id': 'send_a_message',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'api_token',
                    'send_a_message_request',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                ],
                'nullable': [
                ],
                'enum': [
                    'channel_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('channel_type',): {

                        "OPEN_CHANNELS": "open_channels",
                        "GROUP_CHANNELS": "group_channels"
                    },
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'api_token':
                        (str,),
                    'send_a_message_request':
                        (SendAMessageRequest,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'api_token': 'api-token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'api_token': 'header',
                    'send_a_message_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_a_message_endpoint = _Endpoint(
            settings={
                'response_type': (SendbirdMessageResponse,),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages/{message_id}',
                'operation_id': 'update_a_message',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                    'api_token',
                    'update_a_message_request',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'channel_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('channel_type',): {

                        "OPEN_CHANNELS": "open_channels",
                        "GROUP_CHANNELS": "group_channels"
                    },
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_id':
                        (str,),
                    'api_token':
                        (str,),
                    'update_a_message_request':
                        (UpdateAMessageRequest,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_id': 'message_id',
                    'api_token': 'api-token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_id': 'path',
                    'api_token': 'header',
                    'update_a_message_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_extra_data_in_a_message_endpoint = _Endpoint(
            settings={
                'response_type': (UpdateExtraDataInAMessageResponse,),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray',
                'operation_id': 'update_extra_data_in_a_message',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                    'api_token',
                    'update_extra_data_in_a_message_request',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'channel_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('channel_type',): {

                        "OPEN_CHANNELS": "open_channels",
                        "GROUP_CHANNELS": "group_channels"
                    },
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_id':
                        (str,),
                    'api_token':
                        (str,),
                    'update_extra_data_in_a_message_request':
                        (UpdateExtraDataInAMessageRequest,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_id': 'message_id',
                    'api_token': 'api-token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_id': 'path',
                    'api_token': 'header',
                    'update_extra_data_in_a_message_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def add_extra_data_to_a_message(
        self,
        channel_type,
        channel_url,
        message_id,
        **kwargs
    ):
        """Add extra data to a message  # noqa: E501

        ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-add-metadata#1-add-metadata ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_extra_data_to_a_message(channel_type, channel_url, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str): (Required) 
            channel_url (str): (Required) 
            message_id (str): (Required) 

        Keyword Args:
            api_token (str): [optional]
            add_extra_data_to_a_message_request (AddExtraDataToAMessageRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddExtraDataToAMessageResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_id'] = \
            message_id
        return self.add_extra_data_to_a_message_endpoint.call_with_http_info(**kwargs)

    def delete_a_message(
        self,
        channel_type,
        channel_url,
        message_id,
        **kwargs
    ):
        """Delete a message  # noqa: E501

        ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/delete-a-message#1-delete-a-message ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_a_message(channel_type, channel_url, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str): (Required) 
            channel_url (str): (Required) 
            message_id (str): (Required) 

        Keyword Args:
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_id'] = \
            message_id
        return self.delete_a_message_endpoint.call_with_http_info(**kwargs)

    def get_a_message(
        self,
        channel_type,
        channel_url,
        message_id,
        **kwargs
    ):
        """Get a message  # noqa: E501

        ## Get a message  Retrieves information on a specific message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/get-a-message#1-get-a-message ----------------------------   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to retrieve.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_a_message(channel_type, channel_url, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str): (Required) 
            channel_url (str): (Required) 
            message_id (str): (Required) 

        Keyword Args:
            include_reactions (bool): [optional]
            include_thread_info (bool): [optional]
            include_parent_message_info (bool): [optional]
            include_poll_details (bool): Determines whether to include all properties of a poll resource with a full list of options in the results. If set to false, a selection of poll resource properties consisting of id, title, close_at, created_at, updated_at, status, and message_id are returned. (Default: false) * To use this property, the polls feature should be turned on in Settings > Chat > Features on Sendbird Dashboard.. [optional]
            with_sorted_meta_array (bool): [optional]
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SendbirdMessageResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_id'] = \
            message_id
        return self.get_a_message_endpoint.call_with_http_info(**kwargs)

    def get_total_number_of_messages_in_a_channel(
        self,
        channel_type,
        channel_url,
        **kwargs
    ):
        """Get total number of messages in a channel  # noqa: E501

        ## Get total number of messages in a channel  Retrieves the total number of messages in a specific channel.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/get-total-number-of-messages-in-a-channel#1-get-total-number-of-messages-in-a-channel ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_total_number_of_messages_in_a_channel(channel_type, channel_url, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str): (Required) 
            channel_url (str): (Required) 

        Keyword Args:
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetTotalNumberOfMessagesInAChannelResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        return self.get_total_number_of_messages_in_a_channel_endpoint.call_with_http_info(**kwargs)

    def list_messages(
        self,
        channel_type,
        channel_url,
        message_ts,
        message_id,
        **kwargs
    ):
        """List messages  # noqa: E501

        ## List messages  You can retrieve a list of past messages of a specific channel with this API.  By default, this action returns a list of messages in the order they were created. Replies in threaded messages are also listed in the chronological order of their creation like other messages, not grouped with their parent messages.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/list-messages#1-list-messages  `channel_type`   Type: string   Description: Specifies the type of the channel. Either open_channels or group_channels.   `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of past messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_messages(channel_type, channel_url, message_ts, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str): (Required) 
            channel_url (str): (Required) 
            message_ts (int): Specifies the timestamp to be the reference point of the query in Unix milliseconds. Either this or the message_id parameter below should be specified in your query URL to retrieve a list. It fetches messages that were sent prior to and after the specified message_ts and the default value for both prev_limit and next_limit is 15.
            message_id (int): Specifies the unique ID of the message to be the reference point of the query. Either this or the message_ts parameter above should be specified in your query URL to retrieve a list. It fetches messages that were sent prior to and after the specified message_id and the default value for both prev_limit and next_limit is 15.

        Keyword Args:
            prev_limit (int): Specifies the number of previously sent messages to retrieve before message_ts. For example, if message_ts=1484202848298, then prev_limit=50 returns 50 messages sent by 1484202848297 (message_ts - 1). Acceptable values range from 0 to 200. (Default: 15). [optional]
            next_limit (int): Specifies the number of sent messages to retrieve after message_ts. For example, if message_ts=1484202848298, then next_limit=50 returns 50 messages sent from 1484202848299 (message_ts + 1). Acceptable values range from 0 to 200. (Default: 15). [optional]
            include (bool): Determines whether to include messages sent exactly on the specified message_ts in the results. (Default: true). [optional]
            reverse (bool): Determines whether to sort the results in reverse chronological order. If set to true, messages appear in reverse chronological order where the newest comes first and the oldest last. (Default: false). [optional]
            sender_id (str): Restricts the search scope to only retrieve messages sent by the user with the specified ID.. [optional]
            sender_ids (str): Restricts the search scope to only retrieve messages sent by one or more users with the specified IDs listed in a comma-separated string.. [optional]
            operator_filter (str): [optional]
            custom_types (str): Specifies a comma-separated string of one or more custom message types to retrieve. The value set to this parameter can serve as a filter as follows: - A string of specific custom types: Messages with the corresponding custom types are returned. - Empty like &custom_types=&...: Messages whose custom_type property is empty or has a value of null are returned. - An asterisk (\\*) (default): All messages are returned regardless of their custom_type.. [optional]
            message_type (str): [optional]
            including_removed (bool): [optional]
            include_reactions (bool): [optional]
            include_reply_type (str): One of following values: NONE, ALL, ONLY_REPLY_TO_CHANNEL. [optional]
            include_parent_message_info (bool): [optional]
            include_thread_info (bool): [optional]
            include_poll_details (bool): Determines whether to include all properties of a poll resource with a full list of options in the results. If set to false, a selection of poll resource properties consisting of id, title, close_at, created_at, updated_at, status, and message_id are returned. (Default: false) * To use this property, the polls feature should be turned on in Settings > Chat > Features on Sendbird Dashboard.. [optional]
            with_sorted_meta_array (bool): Determines whether to include the sorted_metaarray property in the response. (Default: false). [optional]
            show_subchannel_messages_only (bool): [optional]
            user_id (str): [optional]
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ListMessagesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_ts'] = \
            message_ts
        kwargs['message_id'] = \
            message_id
        return self.list_messages_endpoint.call_with_http_info(**kwargs)

    def mark_channel_messages_as_read(
        self,
        channel_url,
        **kwargs
    ):
        """Mark all messages as read  # noqa: E501

        ## Mark all messages as read  Marks all messages in a group channel as read for a specific user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/platform-api/v3/message/read-receipts/mark-all-messages-as-read-message#1-mark-all-messages-as-read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mark_channel_messages_as_read(channel_url, async_req=True)
        >>> result = thread.get()

        Args:
            channel_url (str): (Required) 

        Keyword Args:
            api_token (str): [optional]
            mark_channel_messages_as_read_request (MarkChannelMessagesAsReadRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['channel_url'] = \
            channel_url
        return self.mark_channel_messages_as_read_endpoint.call_with_http_info(**kwargs)

    def migrate_messages(
        self,
        target_channel_url,
        **kwargs
    ):
        """Migrate messages  # noqa: E501

        ## Migrate messages  Using our migration API, you can migrate the messages from another system into a Sendbird system's [channel](https://sendbird.com/docs/chat/v3/platform-api/guides/channel-types) which consists of users, messages, and other chat-related data.  > To turn on this feature, [contact our support team](https://dashboard.sendbird.com/settings/contact_us).      There are three things to do in advance before the migration. Follow the instructions below:  1. Register the users of your current chat solution to your Sendbird application. You can migrate the users into the Sendbird system using the [user creation API](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user).      2. Create either an [open](https://sendbird.com/docs/chat/v3/platform-api/guides/open-channel#2-create-a-channel) or a [group](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel) channel to migrate the messages of your chat solution. The Sendbird system doesn't create a channel for your migration automatically.      3. The maximum number of migrated messages per call is 100. To avoid the failure during your migration, you must adjust the number of messages to process at once via the API.       https://sendbird.com/docs/chat/platform-api/v3/message/migration/migrate-messages#1-migrate-messages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.migrate_messages(target_channel_url, async_req=True)
        >>> result = thread.get()

        Args:
            target_channel_url (str): (Required) 

        Keyword Args:
            api_token (str): [optional]
            migrate_messages_request (MigrateMessagesRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['target_channel_url'] = \
            target_channel_url
        return self.migrate_messages_endpoint.call_with_http_info(**kwargs)

    def remove_extra_data_from_a_message(
        self,
        channel_type,
        channel_url,
        message_id,
        **kwargs
    ):
        """Remove extra data from a message  # noqa: E501

        ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-remove-metadata#1-remove-metadata ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_extra_data_from_a_message(channel_type, channel_url, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str): (Required) 
            channel_url (str): (Required) 
            message_id (str): (Required) 

        Keyword Args:
            keys (str): [optional]
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_id'] = \
            message_id
        return self.remove_extra_data_from_a_message_endpoint.call_with_http_info(**kwargs)

    def send_a_message(
        self,
        channel_type,
        channel_url,
        **kwargs
    ):
        """Send a message  # noqa: E501

        ## Send a message  You can use this action to send a text message, a file message, or an admin message to a specific channel. Sendbird Chat SDKs and the platform API allows you to upload any type of files in messages to the Sendbird server. See [Message Overview](https://sendbird.com/docs/chat/platform-api/v3/message/message-overview) for more information on each message type. Messages are sent between client devices running the Sendbird Chat SDK or UIKit as well as programmatically from businesses to their customers. For instance, a delivery app can automatically send a message like \"Arriving in one minute!\" on behalf of a delivery driver.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/send-a-message#1-send-a-message ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_a_message(channel_type, channel_url, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str): (Required) 
            channel_url (str): (Required) 

        Keyword Args:
            api_token (str): [optional]
            send_a_message_request (SendAMessageRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SendbirdMessageResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        return self.send_a_message_endpoint.call_with_http_info(**kwargs)

    def update_a_message(
        self,
        channel_type,
        channel_url,
        message_id,
        **kwargs
    ):
        """Update a message  # noqa: E501

        ## Update a message  Updates specific information on a message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/update-a-message#1-update-a-message ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_a_message(channel_type, channel_url, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str): (Required) 
            channel_url (str): (Required) 
            message_id (str): (Required) 

        Keyword Args:
            api_token (str): [optional]
            update_a_message_request (UpdateAMessageRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SendbirdMessageResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_id'] = \
            message_id
        return self.update_a_message_endpoint.call_with_http_info(**kwargs)

    def update_extra_data_in_a_message(
        self,
        channel_type,
        channel_url,
        message_id,
        **kwargs
    ):
        """Update extra data in a message  # noqa: E501

        ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-update-metadata#1-update-metadata ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_extra_data_in_a_message(channel_type, channel_url, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str): (Required) 
            channel_url (str): (Required) 
            message_id (str): (Required) 

        Keyword Args:
            api_token (str): [optional]
            update_extra_data_in_a_message_request (UpdateExtraDataInAMessageRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UpdateExtraDataInAMessageResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_id'] = \
            message_id
        return self.update_extra_data_in_a_message_endpoint.call_with_http_info(**kwargs)

