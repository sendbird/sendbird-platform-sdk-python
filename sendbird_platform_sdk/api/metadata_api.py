"""
    Sendbird Platform SDK

    Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@sendbird.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from sendbird_platform_sdk.api_client import ApiClient, Endpoint as _Endpoint
from sendbird_platform_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from sendbird_platform_sdk.model.create_a_channel_metadata_request import CreateAChannelMetadataRequest
from sendbird_platform_sdk.model.create_a_channel_metadata_response import CreateAChannelMetadataResponse
from sendbird_platform_sdk.model.update_a_channel_metadata_request import UpdateAChannelMetadataRequest


class MetadataApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_a_channel_metadata_endpoint = _Endpoint(
            settings={
                'response_type': (CreateAChannelMetadataResponse,),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/metadata',
                'operation_id': 'create_a_channel_metadata',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'api_token',
                    'create_a_channel_metadata_request',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                ],
                'nullable': [
                ],
                'enum': [
                    'channel_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('channel_type',): {

                        "OPEN_CHANNELS": "open_channels",
                        "GROUP_CHANNELS": "group_channels"
                    },
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'api_token':
                        (str,),
                    'create_a_channel_metadata_request':
                        (CreateAChannelMetadataRequest,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'api_token': 'api-token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'api_token': 'header',
                    'create_a_channel_metadata_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_a_channel_metadata_when_deleting_all_items_of_a_channel_metadata_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/metadata',
                'operation_id': 'delete_a_channel_metadata_when_deleting_all_items_of_a_channel_metadata',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'key',
                    'api_token',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                ],
                'nullable': [
                ],
                'enum': [
                    'channel_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('channel_type',): {

                        "OPEN_CHANNELS": "open_channels",
                        "GROUP_CHANNELS": "group_channels"
                    },
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'key':
                        (str,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'key': 'key',
                    'api_token': 'api-token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'key': 'path',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_a_channel_metadata_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/metadata',
                'operation_id': 'update_a_channel_metadata',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'api_token',
                    'update_a_channel_metadata_request',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                ],
                'nullable': [
                ],
                'enum': [
                    'channel_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('channel_type',): {

                        "OPEN_CHANNELS": "open_channels",
                        "GROUP_CHANNELS": "group_channels"
                    },
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'api_token':
                        (str,),
                    'update_a_channel_metadata_request':
                        (UpdateAChannelMetadataRequest,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'api_token': 'api-token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'api_token': 'header',
                    'update_a_channel_metadata_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.view_a_channel_metadata_when_retrieving_all_items_of_a_channel_metadata_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/metadata',
                'operation_id': 'view_a_channel_metadata_when_retrieving_all_items_of_a_channel_metadata',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'key',
                    'keys',
                    'api_token',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                ],
                'nullable': [
                ],
                'enum': [
                    'channel_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('channel_type',): {

                        "OPEN_CHANNELS": "open_channels",
                        "GROUP_CHANNELS": "group_channels"
                    },
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'key':
                        (str,),
                    'keys':
                        (str,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'key': 'key',
                    'keys': 'keys',
                    'api_token': 'api-token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'key': 'query',
                    'keys': 'query',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def create_a_channel_metadata(
        self,
        channel_type,
        channel_url,
        **kwargs
    ):
        """Create a channel metadata  # noqa: E501

        ## Create a channel metadata  Creates a channel metadata's items to store in a channel.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-metadata/channel-create-metadata#1-create-metadata ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_a_channel_metadata(channel_type, channel_url, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str): (Required) 
            channel_url (str): (Required) 

        Keyword Args:
            api_token (str): [optional]
            create_a_channel_metadata_request (CreateAChannelMetadataRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateAChannelMetadataResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        return self.create_a_channel_metadata_endpoint.call_with_http_info(**kwargs)

    def delete_a_channel_metadata_when_deleting_all_items_of_a_channel_metadata(
        self,
        channel_type,
        channel_url,
        **kwargs
    ):
        """Delete a channel metadata - When deleting all items of a channel metadata  # noqa: E501

        ## Delete a channel metadata  Deletes a channel metadata's one or all items that are stored in a channel.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-metadata/channel-delete-metadata#1-delete-metadata ----------------------------   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel which has the metadata to delete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_a_channel_metadata_when_deleting_all_items_of_a_channel_metadata(channel_type, channel_url, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str): (Required) 
            channel_url (str): (Required) 

        Keyword Args:
            key (str): [optional]
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        return self.delete_a_channel_metadata_when_deleting_all_items_of_a_channel_metadata_endpoint.call_with_http_info(**kwargs)

    def update_a_channel_metadata(
        self,
        channel_type,
        channel_url,
        **kwargs
    ):
        """Update a channel metadata - When updating existing items of a channel metadata by their keys or adding new items to the metadata  # noqa: E501

        ## Update a channel metadata  Updates existing items of a channel metadata by their keys, or adds new items to the metadata.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-metadata/channel-update-metadata#1-update-metadata ----------------------------   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_a_channel_metadata(channel_type, channel_url, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str): (Required) 
            channel_url (str): (Required) 

        Keyword Args:
            api_token (str): [optional]
            update_a_channel_metadata_request (UpdateAChannelMetadataRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        return self.update_a_channel_metadata_endpoint.call_with_http_info(**kwargs)

    def view_a_channel_metadata_when_retrieving_all_items_of_a_channel_metadata(
        self,
        channel_type,
        channel_url,
        **kwargs
    ):
        """View a channel metadata - When retrieving all items of a channel metadata  # noqa: E501

        ## View a channel metadata  Retrieves a channel metadata's one or more items that are stored in a channel.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-metadata/channel-get-metadata#1-get-metadata ----------------------------   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.view_a_channel_metadata_when_retrieving_all_items_of_a_channel_metadata(channel_type, channel_url, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str): (Required) 
            channel_url (str): (Required) 

        Keyword Args:
            key (str): [optional]
            keys (str): In a query string, specifies an array of one or more keys of the metadata items. If not specified, all items of the metadata are returned. If specified, only the items that match the parameter values are returned. URL encoding each key is recommended.. [optional]
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        return self.view_a_channel_metadata_when_retrieving_all_items_of_a_channel_metadata_endpoint.call_with_http_info(**kwargs)

