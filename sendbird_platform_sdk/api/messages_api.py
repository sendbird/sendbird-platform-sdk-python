"""
    Sendbird Platform SDK

    Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from sendbird_platform_sdk.api_client import ApiClient, Endpoint as _Endpoint
from sendbird_platform_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from sendbird_platform_sdk.model.add_extra_data_to_message_data import AddExtraDataToMessageData
from sendbird_platform_sdk.model.add_reaction_to_a_message_data import AddReactionToAMessageData
from sendbird_platform_sdk.model.gc_mark_all_messages_as_delivered_data import GcMarkAllMessagesAsDeliveredData
from sendbird_platform_sdk.model.gc_mark_all_messages_as_read_data import GcMarkAllMessagesAsReadData
from sendbird_platform_sdk.model.inline_response20047 import InlineResponse20047
from sendbird_platform_sdk.model.inline_response20048 import InlineResponse20048
from sendbird_platform_sdk.model.inline_response20049 import InlineResponse20049
from sendbird_platform_sdk.model.inline_response20050 import InlineResponse20050
from sendbird_platform_sdk.model.inline_response20052 import InlineResponse20052
from sendbird_platform_sdk.model.inline_response20053 import InlineResponse20053
from sendbird_platform_sdk.model.inline_response20054 import InlineResponse20054
from sendbird_platform_sdk.model.send_bird_message_response import SendBirdMessageResponse
from sendbird_platform_sdk.model.send_message_data import SendMessageData
from sendbird_platform_sdk.model.update_extra_data_in_message_data import UpdateExtraDataInMessageData
from sendbird_platform_sdk.model.update_message_by_id_data import UpdateMessageByIdData


class MessagesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_extra_data_to_message_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20054,),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray',
                'operation_id': 'add_extra_data_to_message',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                    'api_token',
                    'add_extra_data_to_message_data',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_id':
                        (str,),
                    'api_token':
                        (str,),
                    'add_extra_data_to_message_data':
                        (AddExtraDataToMessageData,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_id': 'message_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_id': 'path',
                    'api_token': 'header',
                    'add_extra_data_to_message_data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.add_reaction_to_a_message_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20053,),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions',
                'operation_id': 'add_reaction_to_a_message',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                    'api_token',
                    'add_reaction_to_a_message_data',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_id':
                        (str,),
                    'api_token':
                        (str,),
                    'add_reaction_to_a_message_data':
                        (AddReactionToAMessageData,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_id': 'message_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_id': 'path',
                    'api_token': 'header',
                    'add_reaction_to_a_message_data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_message_by_id_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages/{message_id}',
                'operation_id': 'delete_message_by_id',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                    'api_token',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_id':
                        (str,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_id': 'message_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_id': 'path',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.gc_mark_all_messages_as_delivered_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20050,),
                'auth': [],
                'endpoint_path': '/v3/group_channels/{channel_url}/messages/mark_as_delivered',
                'operation_id': 'gc_mark_all_messages_as_delivered',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_url',
                    'api_token',
                    'gc_mark_all_messages_as_delivered_data',
                ],
                'required': [
                    'channel_url',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_url':
                        (str,),
                    'api_token':
                        (str,),
                    'gc_mark_all_messages_as_delivered_data':
                        (GcMarkAllMessagesAsDeliveredData,),
                },
                'attribute_map': {
                    'channel_url': 'channel_url',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'channel_url': 'path',
                    'api_token': 'header',
                    'gc_mark_all_messages_as_delivered_data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.gc_mark_all_messages_as_read_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/v3/group_channels/{channel_url}/messages/mark_as_read',
                'operation_id': 'gc_mark_all_messages_as_read',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_url',
                    'api_token',
                    'gc_mark_all_messages_as_read_data',
                ],
                'required': [
                    'channel_url',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_url':
                        (str,),
                    'api_token':
                        (str,),
                    'gc_mark_all_messages_as_read_data':
                        (GcMarkAllMessagesAsReadData,),
                },
                'attribute_map': {
                    'channel_url': 'channel_url',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'channel_url': 'path',
                    'api_token': 'header',
                    'gc_mark_all_messages_as_read_data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.gc_view_number_of_each_members_unread_messages_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20049,),
                'auth': [],
                'endpoint_path': '/v3/group_channels/{channel_url}/messages/unread_count',
                'operation_id': 'gc_view_number_of_each_members_unread_messages',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_url',
                    'api_token',
                    'user_ids',
                ],
                'required': [
                    'channel_url',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_url':
                        (str,),
                    'api_token':
                        (str,),
                    'user_ids':
                        (str,),
                },
                'attribute_map': {
                    'channel_url': 'channel_url',
                    'api_token': 'Api-Token',
                    'user_ids': 'user_ids',
                },
                'location_map': {
                    'channel_url': 'path',
                    'api_token': 'header',
                    'user_ids': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_messages_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20047,),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages',
                'operation_id': 'list_messages',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_ts',
                    'message_id',
                    'api_token',
                    'prev_limit',
                    'next_limit',
                    'include',
                    'reverse',
                    'sender_id',
                    'sender_ids',
                    'operator_filter',
                    'custom_types',
                    'message_type',
                    'including_removed',
                    'include_reactions',
                    'with_sorted_meta_array',
                    'show_subchannel_messages_only',
                    'user_id',
                    'custom_type',
                    'with_meta_array',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_ts',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_ts':
                        (int,),
                    'message_id':
                        (int,),
                    'api_token':
                        (str,),
                    'prev_limit':
                        (int,),
                    'next_limit':
                        (int,),
                    'include':
                        (bool,),
                    'reverse':
                        (bool,),
                    'sender_id':
                        (str,),
                    'sender_ids':
                        (str,),
                    'operator_filter':
                        (str,),
                    'custom_types':
                        (str,),
                    'message_type':
                        (str,),
                    'including_removed':
                        (bool,),
                    'include_reactions':
                        (bool,),
                    'with_sorted_meta_array':
                        (bool,),
                    'show_subchannel_messages_only':
                        (bool,),
                    'user_id':
                        (str,),
                    'custom_type':
                        (str,),
                    'with_meta_array':
                        (bool,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_ts': 'message_ts',
                    'message_id': 'message_id',
                    'api_token': 'Api-Token',
                    'prev_limit': 'prev_limit',
                    'next_limit': 'next_limit',
                    'include': 'include',
                    'reverse': 'reverse',
                    'sender_id': 'sender_id',
                    'sender_ids': 'sender_ids',
                    'operator_filter': 'operator_filter',
                    'custom_types': 'custom_types',
                    'message_type': 'message_type',
                    'including_removed': 'including_removed',
                    'include_reactions': 'include_reactions',
                    'with_sorted_meta_array': 'with_sorted_meta_array',
                    'show_subchannel_messages_only': 'show_subchannel_messages_only',
                    'user_id': 'user_id',
                    'custom_type': 'custom_type',
                    'with_meta_array': 'with_meta_array',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_ts': 'query',
                    'message_id': 'query',
                    'api_token': 'header',
                    'prev_limit': 'query',
                    'next_limit': 'query',
                    'include': 'query',
                    'reverse': 'query',
                    'sender_id': 'query',
                    'sender_ids': 'query',
                    'operator_filter': 'query',
                    'custom_types': 'query',
                    'message_type': 'query',
                    'including_removed': 'query',
                    'include_reactions': 'query',
                    'with_sorted_meta_array': 'query',
                    'show_subchannel_messages_only': 'query',
                    'user_id': 'query',
                    'custom_type': 'query',
                    'with_meta_array': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_reactions_of_message_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20052,),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions',
                'operation_id': 'list_reactions_of_message',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                    'api_token',
                    'list_users',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_id':
                        (str,),
                    'api_token':
                        (str,),
                    'list_users':
                        (bool,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_id': 'message_id',
                    'api_token': 'Api-Token',
                    'list_users': 'list_users',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_id': 'path',
                    'api_token': 'header',
                    'list_users': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_extra_data_from_message_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray',
                'operation_id': 'remove_extra_data_from_message',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                    'api_token',
                    'keys',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_id':
                        (str,),
                    'api_token':
                        (str,),
                    'keys':
                        ([str],),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_id': 'message_id',
                    'api_token': 'Api-Token',
                    'keys': 'keys',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_id': 'path',
                    'api_token': 'header',
                    'keys': 'query',
                },
                'collection_format_map': {
                    'keys': 'multi',
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_reaction_from_a_message_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20053,),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions',
                'operation_id': 'remove_reaction_from_a_message',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                    'api_token',
                    'user_id',
                    'reaction',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_id':
                        (str,),
                    'api_token':
                        (str,),
                    'user_id':
                        (str,),
                    'reaction':
                        (str,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_id': 'message_id',
                    'api_token': 'Api-Token',
                    'user_id': 'user_id',
                    'reaction': 'reaction',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_id': 'path',
                    'api_token': 'header',
                    'user_id': 'query',
                    'reaction': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.send_message_endpoint = _Endpoint(
            settings={
                'response_type': (SendBirdMessageResponse,),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages',
                'operation_id': 'send_message',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'api_token',
                    'send_message_data',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'api_token':
                        (str,),
                    'send_message_data':
                        (SendMessageData,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'api_token': 'header',
                    'send_message_data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.translate_message_into_other_languages_endpoint = _Endpoint(
            settings={
                'response_type': (SendBirdMessageResponse,),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages/{message_id}/translation',
                'operation_id': 'translate_message_into_other_languages',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                    'api_token',
                    'body',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_id':
                        (str,),
                    'api_token':
                        (str,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_id': 'message_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_id': 'path',
                    'api_token': 'header',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_extra_data_in_message_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20054,),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray',
                'operation_id': 'update_extra_data_in_message',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                    'api_token',
                    'update_extra_data_in_message_data',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_id':
                        (str,),
                    'api_token':
                        (str,),
                    'update_extra_data_in_message_data':
                        (UpdateExtraDataInMessageData,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_id': 'message_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_id': 'path',
                    'api_token': 'header',
                    'update_extra_data_in_message_data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_message_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (SendBirdMessageResponse,),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages/{message_id}',
                'operation_id': 'update_message_by_id',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                    'api_token',
                    'update_message_by_id_data',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_id':
                        (str,),
                    'api_token':
                        (str,),
                    'update_message_by_id_data':
                        (UpdateMessageByIdData,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_id': 'message_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_id': 'path',
                    'api_token': 'header',
                    'update_message_by_id_data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.view_message_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (SendBirdMessageResponse,),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages/{message_id}',
                'operation_id': 'view_message_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                    'api_token',
                    'with_sorted_meta_array',
                    'with_meta_array',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'message_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'message_id':
                        (str,),
                    'api_token':
                        (str,),
                    'with_sorted_meta_array':
                        (bool,),
                    'with_meta_array':
                        (bool,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'message_id': 'message_id',
                    'api_token': 'Api-Token',
                    'with_sorted_meta_array': 'with_sorted_meta_array',
                    'with_meta_array': 'with_meta_array',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'message_id': 'path',
                    'api_token': 'header',
                    'with_sorted_meta_array': 'query',
                    'with_meta_array': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.view_total_number_of_messages_in_channel_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20048,),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/messages/total_count',
                'operation_id': 'view_total_number_of_messages_in_channel',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'api_token',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def add_extra_data_to_message(
        self,
        channel_type,
        channel_url,
        message_id,
        **kwargs
    ):
        """Add extra data to a message  # noqa: E501

        ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_extra_data_to_message(channel_type, channel_url, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str):
            channel_url (str):
            message_id (str):

        Keyword Args:
            api_token (str): [optional]
            add_extra_data_to_message_data (AddExtraDataToMessageData): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20054
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_id'] = \
            message_id
        return self.add_extra_data_to_message_endpoint.call_with_http_info(**kwargs)

    def add_reaction_to_a_message(
        self,
        channel_type,
        channel_url,
        message_id,
        **kwargs
    ):
        """Add a reaction to a message  # noqa: E501

        ## Add a reaction to a message  Adds a specific reaction to a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_reaction_to_a_message(channel_type, channel_url, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str):
            channel_url (str):
            message_id (str):

        Keyword Args:
            api_token (str): [optional]
            add_reaction_to_a_message_data (AddReactionToAMessageData): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20053
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_id'] = \
            message_id
        return self.add_reaction_to_a_message_endpoint.call_with_http_info(**kwargs)

    def delete_message_by_id(
        self,
        channel_type,
        channel_url,
        message_id,
        **kwargs
    ):
        """Delete a message  # noqa: E501

        ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_message_by_id(channel_type, channel_url, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str):
            channel_url (str):
            message_id (str):

        Keyword Args:
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_id'] = \
            message_id
        return self.delete_message_by_id_endpoint.call_with_http_info(**kwargs)

    def gc_mark_all_messages_as_delivered(
        self,
        channel_url,
        **kwargs
    ):
        """Mark all messages as delivered  # noqa: E501

        ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.gc_mark_all_messages_as_delivered(channel_url, async_req=True)
        >>> result = thread.get()

        Args:
            channel_url (str):

        Keyword Args:
            api_token (str): [optional]
            gc_mark_all_messages_as_delivered_data (GcMarkAllMessagesAsDeliveredData): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20050
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_url'] = \
            channel_url
        return self.gc_mark_all_messages_as_delivered_endpoint.call_with_http_info(**kwargs)

    def gc_mark_all_messages_as_read(
        self,
        channel_url,
        **kwargs
    ):
        """Mark all messages as read  # noqa: E501

        ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.gc_mark_all_messages_as_read(channel_url, async_req=True)
        >>> result = thread.get()

        Args:
            channel_url (str):

        Keyword Args:
            api_token (str): [optional]
            gc_mark_all_messages_as_read_data (GcMarkAllMessagesAsReadData): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_url'] = \
            channel_url
        return self.gc_mark_all_messages_as_read_endpoint.call_with_http_info(**kwargs)

    def gc_view_number_of_each_members_unread_messages(
        self,
        channel_url,
        **kwargs
    ):
        """View number of each member's unread messages  # noqa: E501

        ## View number of each member's unread messages  Retrieves the total number of each member's unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.gc_view_number_of_each_members_unread_messages(channel_url, async_req=True)
        >>> result = thread.get()

        Args:
            channel_url (str):

        Keyword Args:
            api_token (str): [optional]
            user_ids (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20049
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_url'] = \
            channel_url
        return self.gc_view_number_of_each_members_unread_messages_endpoint.call_with_http_info(**kwargs)

    def list_messages(
        self,
        channel_type,
        channel_url,
        message_ts,
        message_id,
        **kwargs
    ):
        """List messages  # noqa: E501

        ## List messages  Retrieves a list of past messages of a channel.  > This message retrieval is one of Sendbird's [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages ----------------------------   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_messages(channel_type, channel_url, message_ts, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str):
            channel_url (str):
            message_ts (int):
            message_id (int):

        Keyword Args:
            api_token (str): [optional]
            prev_limit (int): [optional]
            next_limit (int): [optional]
            include (bool): [optional]
            reverse (bool): [optional]
            sender_id (str): [optional]
            sender_ids (str): [optional]
            operator_filter (str): [optional]
            custom_types (str): [optional]
            message_type (str): [optional]
            including_removed (bool): [optional]
            include_reactions (bool): [optional]
            with_sorted_meta_array (bool): [optional]
            show_subchannel_messages_only (bool): [optional]
            user_id (str): [optional]
            custom_type (str): [optional]
            with_meta_array (bool): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20047
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_ts'] = \
            message_ts
        kwargs['message_id'] = \
            message_id
        return self.list_messages_endpoint.call_with_http_info(**kwargs)

    def list_reactions_of_message(
        self,
        channel_type,
        channel_url,
        message_id,
        **kwargs
    ):
        """List reactions of a message  # noqa: E501

        ## List reactions of a message  Retrieves a list of reactions made to a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message ----------------------------   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to add a reaction to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_reactions_of_message(channel_type, channel_url, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str):
            channel_url (str):
            message_id (str):

        Keyword Args:
            api_token (str): [optional]
            list_users (bool): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20052
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_id'] = \
            message_id
        return self.list_reactions_of_message_endpoint.call_with_http_info(**kwargs)

    def remove_extra_data_from_message(
        self,
        channel_type,
        channel_url,
        message_id,
        **kwargs
    ):
        """Remove extra data from a message  # noqa: E501

        ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_extra_data_from_message(channel_type, channel_url, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str):
            channel_url (str):
            message_id (str):

        Keyword Args:
            api_token (str): [optional]
            keys ([str]): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_id'] = \
            message_id
        return self.remove_extra_data_from_message_endpoint.call_with_http_info(**kwargs)

    def remove_reaction_from_a_message(
        self,
        channel_type,
        channel_url,
        message_id,
        **kwargs
    ):
        """Remove a reaction from a message  # noqa: E501

        ## Remove a reaction from a message  Removes a specific reaction from a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_reaction_from_a_message(channel_type, channel_url, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str):
            channel_url (str):
            message_id (str):

        Keyword Args:
            api_token (str): [optional]
            user_id (str): [optional]
            reaction (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20053
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_id'] = \
            message_id
        return self.remove_reaction_from_a_message_endpoint.call_with_http_info(**kwargs)

    def send_message(
        self,
        channel_type,
        channel_url,
        **kwargs
    ):
        """Send a message  # noqa: E501

        ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  >__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_message(channel_type, channel_url, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str):
            channel_url (str):

        Keyword Args:
            api_token (str): [optional]
            send_message_data (SendMessageData): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SendBirdMessageResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        return self.send_message_endpoint.call_with_http_info(**kwargs)

    def translate_message_into_other_languages(
        self,
        channel_type,
        channel_url,
        message_id,
        **kwargs
    ):
        """Translate a message into other languages  # noqa: E501

        ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  > __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.translate_message_into_other_languages(channel_type, channel_url, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str):
            channel_url (str):
            message_id (str):

        Keyword Args:
            api_token (str): [optional]
            body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SendBirdMessageResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_id'] = \
            message_id
        return self.translate_message_into_other_languages_endpoint.call_with_http_info(**kwargs)

    def update_extra_data_in_message(
        self,
        channel_type,
        channel_url,
        message_id,
        **kwargs
    ):
        """Update extra data in a message  # noqa: E501

        ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_extra_data_in_message(channel_type, channel_url, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str):
            channel_url (str):
            message_id (str):

        Keyword Args:
            api_token (str): [optional]
            update_extra_data_in_message_data (UpdateExtraDataInMessageData): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20054
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_id'] = \
            message_id
        return self.update_extra_data_in_message_endpoint.call_with_http_info(**kwargs)

    def update_message_by_id(
        self,
        channel_type,
        channel_url,
        message_id,
        **kwargs
    ):
        """Update a message  # noqa: E501

        ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_message_by_id(channel_type, channel_url, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str):
            channel_url (str):
            message_id (str):

        Keyword Args:
            api_token (str): [optional]
            update_message_by_id_data (UpdateMessageByIdData): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SendBirdMessageResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_id'] = \
            message_id
        return self.update_message_by_id_endpoint.call_with_http_info(**kwargs)

    def view_message_by_id(
        self,
        channel_type,
        channel_url,
        message_id,
        **kwargs
    ):
        """View a message  # noqa: E501

        ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message ----------------------------   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to retrieve.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.view_message_by_id(channel_type, channel_url, message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str):
            channel_url (str):
            message_id (str):

        Keyword Args:
            api_token (str): [optional]
            with_sorted_meta_array (bool): [optional]
            with_meta_array (bool): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SendBirdMessageResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['message_id'] = \
            message_id
        return self.view_message_by_id_endpoint.call_with_http_info(**kwargs)

    def view_total_number_of_messages_in_channel(
        self,
        channel_type,
        channel_url,
        **kwargs
    ):
        """View total number of messages in a channel  # noqa: E501

        ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.view_total_number_of_messages_in_channel(channel_type, channel_url, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str):
            channel_url (str):

        Keyword Args:
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20048
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        return self.view_total_number_of_messages_in_channel_endpoint.call_with_http_info(**kwargs)

