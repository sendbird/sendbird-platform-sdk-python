"""
    Sendbird Platform SDK

    Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@sendbird.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from sendbird_platform_sdk.api_client import ApiClient, Endpoint as _Endpoint
from sendbird_platform_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from sendbird_platform_sdk.model.int import Int
from sendbird_platform_sdk.model.v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_delete_request import V3GroupChannelsChannelUrlScheduledMessagesScheduledMessageIdDeleteRequest
from sendbird_platform_sdk.model.v3_scheduled_messages_count_get200_response import V3ScheduledMessagesCountGet200Response
from sendbird_platform_sdk.model.v3_scheduled_messages_get200_response import V3ScheduledMessagesGet200Response


class ScheduledMessageApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.v3_channel_type_channel_url_scheduled_messages_scheduled_message_id_send_now_post_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/v3/{channel_type}/{channel_url}/scheduled_messages/{scheduled_message_id}/send_now',
                'operation_id': 'v3_channel_type_channel_url_scheduled_messages_scheduled_message_id_send_now_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_type',
                    'channel_url',
                    'scheduled_message_id',
                    'api_token',
                ],
                'required': [
                    'channel_type',
                    'channel_url',
                    'scheduled_message_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'scheduled_message_id':
                        (int,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'scheduled_message_id': 'scheduled_message_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'scheduled_message_id': 'path',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.v3_group_channels_channel_url_scheduled_messages_post_endpoint = _Endpoint(
            settings={
                'response_type': (V3ScheduledMessagesGet200Response,),
                'auth': [],
                'endpoint_path': '/v3/group_channels/{channel_url}/scheduled_messages',
                'operation_id': 'v3_group_channels_channel_url_scheduled_messages_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_url',
                    'api_token',
                    'v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_delete_request',
                ],
                'required': [
                    'channel_url',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_url':
                        (str,),
                    'api_token':
                        (str,),
                    'v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_delete_request':
                        (V3GroupChannelsChannelUrlScheduledMessagesScheduledMessageIdDeleteRequest,),
                },
                'attribute_map': {
                    'channel_url': 'channel_url',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'channel_url': 'path',
                    'api_token': 'header',
                    'v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_delete_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': (V3ScheduledMessagesGet200Response,),
                'auth': [],
                'endpoint_path': '/v3/group_channels/{channel_url}/scheduled_messages/{scheduled_message_id}',
                'operation_id': 'v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_url',
                    'scheduled_message_id',
                    'api_token',
                ],
                'required': [
                    'channel_url',
                    'scheduled_message_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_url':
                        (str,),
                    'scheduled_message_id':
                        (int,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'channel_url': 'channel_url',
                    'scheduled_message_id': 'scheduled_message_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'channel_url': 'path',
                    'scheduled_message_id': 'path',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (V3ScheduledMessagesGet200Response,),
                'auth': [],
                'endpoint_path': '/v3/group_channels/{channel_url}/scheduled_messages/{scheduled_message_id}',
                'operation_id': 'v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_url',
                    'scheduled_message_id',
                    'api_token',
                ],
                'required': [
                    'channel_url',
                    'scheduled_message_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_url':
                        (str,),
                    'scheduled_message_id':
                        (int,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'channel_url': 'channel_url',
                    'scheduled_message_id': 'scheduled_message_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'channel_url': 'path',
                    'scheduled_message_id': 'path',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_post_endpoint = _Endpoint(
            settings={
                'response_type': (V3ScheduledMessagesGet200Response,),
                'auth': [],
                'endpoint_path': '/v3/group_channels/{channel_url}/scheduled_messages/{scheduled_message_id}',
                'operation_id': 'v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_url',
                    'scheduled_message_id',
                    'api_token',
                    'v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_delete_request',
                ],
                'required': [
                    'channel_url',
                    'scheduled_message_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_url':
                        (str,),
                    'scheduled_message_id':
                        (int,),
                    'api_token':
                        (str,),
                    'v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_delete_request':
                        (V3GroupChannelsChannelUrlScheduledMessagesScheduledMessageIdDeleteRequest,),
                },
                'attribute_map': {
                    'channel_url': 'channel_url',
                    'scheduled_message_id': 'scheduled_message_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'channel_url': 'path',
                    'scheduled_message_id': 'path',
                    'api_token': 'header',
                    'v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_delete_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.v3_scheduled_messages_count_get_endpoint = _Endpoint(
            settings={
                'response_type': (V3ScheduledMessagesCountGet200Response,),
                'auth': [],
                'endpoint_path': '/v3/scheduled_messages/count',
                'operation_id': 'v3_scheduled_messages_count_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'api_token',
                    'channel_type',
                    'channel_url',
                    'sender_id',
                    'status',
                    'message_type',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'api_token':
                        (str,),
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'sender_id':
                        (str,),
                    'status':
                        ([{str: (bool, date, datetime, dict, float, int, list, str, none_type)}],),
                    'message_type':
                        (str,),
                },
                'attribute_map': {
                    'api_token': 'Api-Token',
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'sender_id': 'sender_id',
                    'status': 'status[]',
                    'message_type': 'message_type',
                },
                'location_map': {
                    'api_token': 'header',
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'sender_id': 'path',
                    'status': 'path',
                    'message_type': 'path',
                },
                'collection_format_map': {
                    'status': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.v3_scheduled_messages_get_endpoint = _Endpoint(
            settings={
                'response_type': (V3ScheduledMessagesGet200Response,),
                'auth': [],
                'endpoint_path': '/v3/scheduled_messages',
                'operation_id': 'v3_scheduled_messages_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'api_token',
                    'channel_type',
                    'channel_url',
                    'sender_id',
                    'token',
                    'limit',
                    'order',
                    'reverse',
                    'status',
                    'message_type',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'api_token':
                        (str,),
                    'channel_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'sender_id':
                        (str,),
                    'token':
                        (str,),
                    'limit':
                        (Int,),
                    'order':
                        (str,),
                    'reverse':
                        (bool,),
                    'status':
                        ([{str: (bool, date, datetime, dict, float, int, list, str, none_type)}],),
                    'message_type':
                        (str,),
                },
                'attribute_map': {
                    'api_token': 'Api-Token',
                    'channel_type': 'channel_type',
                    'channel_url': 'channel_url',
                    'sender_id': 'sender_id',
                    'token': 'token',
                    'limit': 'limit',
                    'order': 'order',
                    'reverse': 'reverse',
                    'status': 'status[]',
                    'message_type': 'message_type',
                },
                'location_map': {
                    'api_token': 'header',
                    'channel_type': 'path',
                    'channel_url': 'path',
                    'sender_id': 'path',
                    'token': 'path',
                    'limit': 'path',
                    'order': 'path',
                    'reverse': 'path',
                    'status': 'path',
                    'message_type': 'path',
                },
                'collection_format_map': {
                    'status': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def v3_channel_type_channel_url_scheduled_messages_scheduled_message_id_send_now_post(
        self,
        channel_type,
        channel_url,
        scheduled_message_id,
        **kwargs
    ):
        """Send a scheduled message immediately  # noqa: E501

        ## Send a scheduled message immediately This action sends a scheduled message immediately. A user can only send their own scheduled messages immediately. https://sendbird.com/docs/chat/v3/platform-api/message/scheduled-messages/send-a-scheduled-message-immediately -----------------------------    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_channel_type_channel_url_scheduled_messages_scheduled_message_id_send_now_post(channel_type, channel_url, scheduled_message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_type (str):
            channel_url (str):
            scheduled_message_id (int):

        Keyword Args:
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['channel_type'] = \
            channel_type
        kwargs['channel_url'] = \
            channel_url
        kwargs['scheduled_message_id'] = \
            scheduled_message_id
        return self.v3_channel_type_channel_url_scheduled_messages_scheduled_message_id_send_now_post_endpoint.call_with_http_info(**kwargs)

    def v3_group_channels_channel_url_scheduled_messages_post(
        self,
        channel_url,
        **kwargs
    ):
        """Create a scheduled message  # noqa: E501

        ## Create a scheduled message This action creates a new scheduled message. If a user leaves the channel before the scheduled time for the message to be sent, the scheduled message will be removed. https://sendbird.com/docs/chat/v3/platform-api/message/scheduled-messages/create-a-scheduled-message -----------------------------    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_group_channels_channel_url_scheduled_messages_post(channel_url, async_req=True)
        >>> result = thread.get()

        Args:
            channel_url (str):

        Keyword Args:
            api_token (str): [optional]
            v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_delete_request (V3GroupChannelsChannelUrlScheduledMessagesScheduledMessageIdDeleteRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V3ScheduledMessagesGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['channel_url'] = \
            channel_url
        return self.v3_group_channels_channel_url_scheduled_messages_post_endpoint.call_with_http_info(**kwargs)

    def v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_delete(
        self,
        channel_url,
        scheduled_message_id,
        **kwargs
    ):
        """Cancel a scheduled message  # noqa: E501

        ## Cancel a scheduled message This action cancels a message that a user has scheduled to send at a later time. https://sendbird.com/docs/chat/v3/platform-api/message/scheduled-messages/cancel-a-scheduled-message -----------------------------                        # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_delete(channel_url, scheduled_message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_url (str):
            scheduled_message_id (int):

        Keyword Args:
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V3ScheduledMessagesGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['channel_url'] = \
            channel_url
        kwargs['scheduled_message_id'] = \
            scheduled_message_id
        return self.v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_delete_endpoint.call_with_http_info(**kwargs)

    def v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_get(
        self,
        channel_url,
        scheduled_message_id,
        **kwargs
    ):
        """View a scheduled message  # noqa: E501

        ## View a scheduled message This action retrieves information on a specific scheduled message. https://sendbird.com/docs/chat/v3/platform-api/message/scheduled-messages/view-a-scheduled-message -----------------------------                        # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_get(channel_url, scheduled_message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_url (str):
            scheduled_message_id (int):

        Keyword Args:
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V3ScheduledMessagesGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['channel_url'] = \
            channel_url
        kwargs['scheduled_message_id'] = \
            scheduled_message_id
        return self.v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_get_endpoint.call_with_http_info(**kwargs)

    def v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_post(
        self,
        channel_url,
        scheduled_message_id,
        **kwargs
    ):
        """Update a scheduled message  # noqa: E501

        ## Update a scheduled message This action updates information on a specific scheduled message. You can’t change the message type. Update operation should be done at least 5 minutes prior to the original scheduled time. https://sendbird.com/docs/chat/v3/platform-api/message/scheduled-messages/update-a-scheduled-message -----------------------------        # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_post(channel_url, scheduled_message_id, async_req=True)
        >>> result = thread.get()

        Args:
            channel_url (str):
            scheduled_message_id (int):

        Keyword Args:
            api_token (str): [optional]
            v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_delete_request (V3GroupChannelsChannelUrlScheduledMessagesScheduledMessageIdDeleteRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V3ScheduledMessagesGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['channel_url'] = \
            channel_url
        kwargs['scheduled_message_id'] = \
            scheduled_message_id
        return self.v3_group_channels_channel_url_scheduled_messages_scheduled_message_id_post_endpoint.call_with_http_info(**kwargs)

    def v3_scheduled_messages_count_get(
        self,
        **kwargs
    ):
        """View number of scheduled messages  # noqa: E501

        ## View number of scheduled messages This action retrieves the total number of scheduled messages that a user has. https://sendbird.com/docs/chat/v3/platform-api/message/scheduled-messages/view-number-of-scheduled-messages -----------------------------    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_scheduled_messages_count_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            api_token (str): [optional]
            channel_type (str): [optional]
            channel_url (str): [optional]
            sender_id (str): [optional]
            status ([{str: (bool, date, datetime, dict, float, int, list, str, none_type)}]): [optional]
            message_type (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V3ScheduledMessagesCountGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.v3_scheduled_messages_count_get_endpoint.call_with_http_info(**kwargs)

    def v3_scheduled_messages_get(
        self,
        **kwargs
    ):
        """List scheduled messages  # noqa: E501

        ## List scheduled messages This action retrieves a list of scheduled messages. A user can only see the list of their own scheduled messages. https://sendbird.com/docs/chat/v3/platform-api/message/scheduled-messages/list-scheduled-messages -----------------------------    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_scheduled_messages_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            api_token (str): [optional]
            channel_type (str): [optional]
            channel_url (str): [optional]
            sender_id (str): [optional]
            token (str): [optional]
            limit (Int): [optional]
            order (str): [optional]
            reverse (bool): [optional]
            status ([{str: (bool, date, datetime, dict, float, int, list, str, none_type)}]): [optional]
            message_type (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V3ScheduledMessagesGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.v3_scheduled_messages_get_endpoint.call_with_http_info(**kwargs)

