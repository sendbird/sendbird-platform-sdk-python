"""
    Sendbird Platform SDK

    Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@sendbird.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from sendbird_platform_sdk.api_client import ApiClient, Endpoint as _Endpoint
from sendbird_platform_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from sendbird_platform_sdk.model.send_bird_poll import SendBirdPoll
from sendbird_platform_sdk.model.send_bird_poll_option import SendBirdPollOption
from sendbird_platform_sdk.model.v3_polls_get_request import V3PollsGetRequest
from sendbird_platform_sdk.model.v3_polls_poll_id_delete_request import V3PollsPollIdDeleteRequest
from sendbird_platform_sdk.model.v3_polls_poll_id_delete_request1 import V3PollsPollIdDeleteRequest1
from sendbird_platform_sdk.model.v3_polls_poll_id_options_option_id_delete_request import V3PollsPollIdOptionsOptionIdDeleteRequest
from sendbird_platform_sdk.model.v3_polls_poll_id_options_option_id_voters_get200_response import V3PollsPollIdOptionsOptionIdVotersGet200Response
from sendbird_platform_sdk.model.v3_polls_poll_id_options_option_id_voters_get_request import V3PollsPollIdOptionsOptionIdVotersGetRequest
from sendbird_platform_sdk.model.v3_polls_poll_id_vote_put_request import V3PollsPollIdVotePutRequest


class PollApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.v3_polls_get_endpoint = _Endpoint(
            settings={
                'response_type': (SendBirdPoll,),
                'auth': [],
                'endpoint_path': '/v3/polls',
                'operation_id': 'v3_polls_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'api_token',
                    'channel_url',
                    'channel_type',
                    'token',
                    'limit',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'api_token':
                        (str,),
                    'channel_url':
                        (str,),
                    'channel_type':
                        (str,),
                    'token':
                        (str,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'api_token': 'Api-Token',
                    'channel_url': 'channel_url',
                    'channel_type': 'channel_type',
                    'token': 'token',
                    'limit': 'limit',
                },
                'location_map': {
                    'api_token': 'header',
                    'channel_url': 'path',
                    'channel_type': 'path',
                    'token': 'path',
                    'limit': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.v3_polls_poll_id_close_put_endpoint = _Endpoint(
            settings={
                'response_type': (SendBirdPoll,),
                'auth': [],
                'endpoint_path': '/v3/polls/{poll_id}/close',
                'operation_id': 'v3_polls_poll_id_close_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'poll_id',
                    'api_token',
                ],
                'required': [
                    'poll_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'poll_id':
                        (int,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'poll_id': 'poll_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'poll_id': 'path',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.v3_polls_poll_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/v3/polls/{poll_id}',
                'operation_id': 'v3_polls_poll_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'poll_id',
                    'api_token',
                ],
                'required': [
                    'poll_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'poll_id':
                        (int,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'poll_id': 'poll_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'poll_id': 'path',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.v3_polls_poll_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (SendBirdPoll,),
                'auth': [],
                'endpoint_path': '/v3/polls/{poll_id}',
                'operation_id': 'v3_polls_poll_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'poll_id',
                    'api_token',
                    'v3_polls_poll_id_delete_request',
                ],
                'required': [
                    'poll_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'poll_id':
                        (int,),
                    'api_token':
                        (str,),
                    'v3_polls_poll_id_delete_request':
                        (V3PollsPollIdDeleteRequest,),
                },
                'attribute_map': {
                    'poll_id': 'poll_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'poll_id': 'path',
                    'api_token': 'header',
                    'v3_polls_poll_id_delete_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.v3_polls_poll_id_options_option_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/v3/polls/{poll_id}/options/{option_id}',
                'operation_id': 'v3_polls_poll_id_options_option_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'poll_id',
                    'option_id',
                    'api_token',
                ],
                'required': [
                    'poll_id',
                    'option_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'poll_id':
                        (int,),
                    'option_id':
                        (int,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'poll_id': 'poll_id',
                    'option_id': 'option_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'poll_id': 'path',
                    'option_id': 'path',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.v3_polls_poll_id_options_option_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (SendBirdPollOption,),
                'auth': [],
                'endpoint_path': '/v3/polls/{poll_id}/options/{option_id}',
                'operation_id': 'v3_polls_poll_id_options_option_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'poll_id',
                    'option_id',
                    'api_token',
                ],
                'required': [
                    'poll_id',
                    'option_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'poll_id':
                        (int,),
                    'option_id':
                        (int,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'poll_id': 'poll_id',
                    'option_id': 'option_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'poll_id': 'path',
                    'option_id': 'path',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.v3_polls_poll_id_options_option_id_put_endpoint = _Endpoint(
            settings={
                'response_type': (SendBirdPoll,),
                'auth': [],
                'endpoint_path': '/v3/polls/{poll_id}/options/{option_id}',
                'operation_id': 'v3_polls_poll_id_options_option_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'poll_id',
                    'option_id',
                    'api_token',
                    'v3_polls_poll_id_options_option_id_delete_request',
                ],
                'required': [
                    'poll_id',
                    'option_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'poll_id':
                        (int,),
                    'option_id':
                        (int,),
                    'api_token':
                        (str,),
                    'v3_polls_poll_id_options_option_id_delete_request':
                        (V3PollsPollIdOptionsOptionIdDeleteRequest,),
                },
                'attribute_map': {
                    'poll_id': 'poll_id',
                    'option_id': 'option_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'poll_id': 'path',
                    'option_id': 'path',
                    'api_token': 'header',
                    'v3_polls_poll_id_options_option_id_delete_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.v3_polls_poll_id_options_option_id_voters_get_endpoint = _Endpoint(
            settings={
                'response_type': (V3PollsPollIdOptionsOptionIdVotersGet200Response,),
                'auth': [],
                'endpoint_path': '/v3/polls/{poll_id}/options/{option_id}/voters',
                'operation_id': 'v3_polls_poll_id_options_option_id_voters_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'poll_id',
                    'option_id',
                    'api_token',
                    'v3_polls_poll_id_options_option_id_voters_get_request',
                ],
                'required': [
                    'poll_id',
                    'option_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'poll_id':
                        (int,),
                    'option_id':
                        (int,),
                    'api_token':
                        (str,),
                    'v3_polls_poll_id_options_option_id_voters_get_request':
                        (V3PollsPollIdOptionsOptionIdVotersGetRequest,),
                },
                'attribute_map': {
                    'poll_id': 'poll_id',
                    'option_id': 'option_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'poll_id': 'path',
                    'option_id': 'path',
                    'api_token': 'header',
                    'v3_polls_poll_id_options_option_id_voters_get_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.v3_polls_poll_id_options_post_endpoint = _Endpoint(
            settings={
                'response_type': (SendBirdPoll,),
                'auth': [],
                'endpoint_path': '/v3/polls/{poll_id}/options',
                'operation_id': 'v3_polls_poll_id_options_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'poll_id',
                    'api_token',
                    'v3_polls_poll_id_options_option_id_delete_request',
                ],
                'required': [
                    'poll_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'poll_id':
                        (int,),
                    'api_token':
                        (str,),
                    'v3_polls_poll_id_options_option_id_delete_request':
                        (V3PollsPollIdOptionsOptionIdDeleteRequest,),
                },
                'attribute_map': {
                    'poll_id': 'poll_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'poll_id': 'path',
                    'api_token': 'header',
                    'v3_polls_poll_id_options_option_id_delete_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.v3_polls_poll_id_put_endpoint = _Endpoint(
            settings={
                'response_type': (SendBirdPoll,),
                'auth': [],
                'endpoint_path': '/v3/polls/{poll_id}',
                'operation_id': 'v3_polls_poll_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'poll_id',
                    'api_token',
                    'v3_polls_poll_id_delete_request1',
                ],
                'required': [
                    'poll_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'poll_id':
                        (int,),
                    'api_token':
                        (str,),
                    'v3_polls_poll_id_delete_request1':
                        (V3PollsPollIdDeleteRequest1,),
                },
                'attribute_map': {
                    'poll_id': 'poll_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'poll_id': 'path',
                    'api_token': 'header',
                    'v3_polls_poll_id_delete_request1': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.v3_polls_poll_id_vote_put_endpoint = _Endpoint(
            settings={
                'response_type': (SendBirdPoll,),
                'auth': [],
                'endpoint_path': '/v3/polls/{poll_id}/vote',
                'operation_id': 'v3_polls_poll_id_vote_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'poll_id',
                    'api_token',
                    'v3_polls_poll_id_vote_put_request',
                ],
                'required': [
                    'poll_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'poll_id':
                        (int,),
                    'api_token':
                        (str,),
                    'v3_polls_poll_id_vote_put_request':
                        (V3PollsPollIdVotePutRequest,),
                },
                'attribute_map': {
                    'poll_id': 'poll_id',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'poll_id': 'path',
                    'api_token': 'header',
                    'v3_polls_poll_id_vote_put_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.v3_polls_post_endpoint = _Endpoint(
            settings={
                'response_type': (SendBirdPoll,),
                'auth': [],
                'endpoint_path': '/v3/polls',
                'operation_id': 'v3_polls_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'title',
                    'options',
                    'api_token',
                    'v3_polls_get_request',
                ],
                'required': [
                    'title',
                    'options',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'title':
                        (str,),
                    'options':
                        ([str],),
                    'api_token':
                        (str,),
                    'v3_polls_get_request':
                        (V3PollsGetRequest,),
                },
                'attribute_map': {
                    'title': 'title',
                    'options': 'options',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'title': 'path',
                    'options': 'path',
                    'api_token': 'header',
                    'v3_polls_get_request': 'body',
                },
                'collection_format_map': {
                    'options': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def v3_polls_get(
        self,
        **kwargs
    ):
        """List polls  # noqa: E501

        ## List polls This action retrieves a paginated list of both open and closed polls in an application or a specific channel. To retrieve polls in a specific channel, the channel_url must be specified. https://sendbird.com/docs/chat/v3/platform-api/message/polls/list-polls  -----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_polls_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            api_token (str): [optional]
            channel_url (str): [optional]
            channel_type (str): [optional]
            token (str): [optional]
            limit (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SendBirdPoll
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.v3_polls_get_endpoint.call_with_http_info(**kwargs)

    def v3_polls_poll_id_close_put(
        self,
        poll_id,
        **kwargs
    ):
        """Close a poll  # noqa: E501

        ## Close a poll This action closes a poll and prevents users from voting any further. https://sendbird.com/docs/chat/v3/platform-api/message/polls/close-a-poll -----------------------------    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_polls_poll_id_close_put(poll_id, async_req=True)
        >>> result = thread.get()

        Args:
            poll_id (int):

        Keyword Args:
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SendBirdPoll
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['poll_id'] = \
            poll_id
        return self.v3_polls_poll_id_close_put_endpoint.call_with_http_info(**kwargs)

    def v3_polls_poll_id_delete(
        self,
        poll_id,
        **kwargs
    ):
        """Delete a poll  # noqa: E501

        ## Delete a poll This action deletes a poll. Once a poll is deleted, you can't retrieve its data. https://sendbird.com/docs/chat/v3/platform-api/message/polls/delete-a-poll -----------------------------    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_polls_poll_id_delete(poll_id, async_req=True)
        >>> result = thread.get()

        Args:
            poll_id (int):

        Keyword Args:
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['poll_id'] = \
            poll_id
        return self.v3_polls_poll_id_delete_endpoint.call_with_http_info(**kwargs)

    def v3_polls_poll_id_get(
        self,
        poll_id,
        **kwargs
    ):
        """Get a poll  # noqa: E501

        ## Get a poll This action retrieves information on a specific poll. https://sendbird.com/docs/chat/v3/platform-api/message/polls/get-a-poll -----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_polls_poll_id_get(poll_id, async_req=True)
        >>> result = thread.get()

        Args:
            poll_id (int):

        Keyword Args:
            api_token (str): [optional]
            v3_polls_poll_id_delete_request (V3PollsPollIdDeleteRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SendBirdPoll
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['poll_id'] = \
            poll_id
        return self.v3_polls_poll_id_get_endpoint.call_with_http_info(**kwargs)

    def v3_polls_poll_id_options_option_id_delete(
        self,
        poll_id,
        option_id,
        **kwargs
    ):
        """Delete a poll option  # noqa: E501

        ## Delete a poll option This action deletes an option from a poll. https://sendbird.com/docs/chat/v3/platform-api/message/polls/delete-a-poll-option -----------------------------   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_polls_poll_id_options_option_id_delete(poll_id, option_id, async_req=True)
        >>> result = thread.get()

        Args:
            poll_id (int):
            option_id (int):

        Keyword Args:
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['poll_id'] = \
            poll_id
        kwargs['option_id'] = \
            option_id
        return self.v3_polls_poll_id_options_option_id_delete_endpoint.call_with_http_info(**kwargs)

    def v3_polls_poll_id_options_option_id_get(
        self,
        poll_id,
        option_id,
        **kwargs
    ):
        """Get a poll option  # noqa: E501

        ## Get a poll option This action retrieves a poll option. https://sendbird.com/docs/chat/v3/platform-api/message/polls/get-a-poll-option -----------------------------    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_polls_poll_id_options_option_id_get(poll_id, option_id, async_req=True)
        >>> result = thread.get()

        Args:
            poll_id (int):
            option_id (int):

        Keyword Args:
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SendBirdPollOption
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['poll_id'] = \
            poll_id
        kwargs['option_id'] = \
            option_id
        return self.v3_polls_poll_id_options_option_id_get_endpoint.call_with_http_info(**kwargs)

    def v3_polls_poll_id_options_option_id_put(
        self,
        poll_id,
        option_id,
        **kwargs
    ):
        """Update a poll option  # noqa: E501

        ## Update a poll option This action updates the content of a poll option. Voting for an option doesn't update the option. https://sendbird.com/docs/chat/v3/platform-api/message/polls/update-a-poll-option -----------------------------    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_polls_poll_id_options_option_id_put(poll_id, option_id, async_req=True)
        >>> result = thread.get()

        Args:
            poll_id (int):
            option_id (int):

        Keyword Args:
            api_token (str): [optional]
            v3_polls_poll_id_options_option_id_delete_request (V3PollsPollIdOptionsOptionIdDeleteRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SendBirdPoll
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['poll_id'] = \
            poll_id
        kwargs['option_id'] = \
            option_id
        return self.v3_polls_poll_id_options_option_id_put_endpoint.call_with_http_info(**kwargs)

    def v3_polls_poll_id_options_option_id_voters_get(
        self,
        poll_id,
        option_id,
        **kwargs
    ):
        """List voters of a poll option  # noqa: E501

        ## List voters of a poll option This action retrieves a list of users who voted for a poll option. https://sendbird.com/docs/chat/v3/platform-api/message/polls/list-voters-of-a-poll-option  -----------------------------    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_polls_poll_id_options_option_id_voters_get(poll_id, option_id, async_req=True)
        >>> result = thread.get()

        Args:
            poll_id (int):
            option_id (int):

        Keyword Args:
            api_token (str): [optional]
            v3_polls_poll_id_options_option_id_voters_get_request (V3PollsPollIdOptionsOptionIdVotersGetRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            V3PollsPollIdOptionsOptionIdVotersGet200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['poll_id'] = \
            poll_id
        kwargs['option_id'] = \
            option_id
        return self.v3_polls_poll_id_options_option_id_voters_get_endpoint.call_with_http_info(**kwargs)

    def v3_polls_poll_id_options_post(
        self,
        poll_id,
        **kwargs
    ):
        """Add a poll option  # noqa: E501

        ## Add a poll option This action adds a new option to a poll. https://sendbird.com/docs/chat/v3/platform-api/message/polls/add-a-poll-option -----------------------------    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_polls_poll_id_options_post(poll_id, async_req=True)
        >>> result = thread.get()

        Args:
            poll_id (int):

        Keyword Args:
            api_token (str): [optional]
            v3_polls_poll_id_options_option_id_delete_request (V3PollsPollIdOptionsOptionIdDeleteRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SendBirdPoll
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['poll_id'] = \
            poll_id
        return self.v3_polls_poll_id_options_post_endpoint.call_with_http_info(**kwargs)

    def v3_polls_poll_id_put(
        self,
        poll_id,
        **kwargs
    ):
        """Update a poll  # noqa: E501

        ## Update a poll This action updates information of a poll. To change the content of a poll option, see the update a poll option page. https://sendbird.com/docs/chat/v3/platform-api/message/polls/update-a-poll -----------------------------    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_polls_poll_id_put(poll_id, async_req=True)
        >>> result = thread.get()

        Args:
            poll_id (int):

        Keyword Args:
            api_token (str): [optional]
            v3_polls_poll_id_delete_request1 (V3PollsPollIdDeleteRequest1): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SendBirdPoll
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['poll_id'] = \
            poll_id
        return self.v3_polls_poll_id_put_endpoint.call_with_http_info(**kwargs)

    def v3_polls_poll_id_vote_put(
        self,
        poll_id,
        **kwargs
    ):
        """Cast or cancel a vote  # noqa: E501

        ## Cast or cancel a vote This action adds or removes a vote from a poll option, changing the number of votes given to each option. Use this action to override a previous vote and update the user's final choice of poll options. https://sendbird.com/docs/chat/v3/platform-api/message/polls/cast-or-cancel-a-vote -----------------------------    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_polls_poll_id_vote_put(poll_id, async_req=True)
        >>> result = thread.get()

        Args:
            poll_id (int):

        Keyword Args:
            api_token (str): [optional]
            v3_polls_poll_id_vote_put_request (V3PollsPollIdVotePutRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SendBirdPoll
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['poll_id'] = \
            poll_id
        return self.v3_polls_poll_id_vote_put_endpoint.call_with_http_info(**kwargs)

    def v3_polls_post(
        self,
        title,
        options,
        **kwargs
    ):
        """Create a poll  # noqa: E501

        ## Create a poll This action creates a poll with at least one option.You can configure various settings for your poll, including when the poll will close and whether to allow voting for multiple options. After creating a poll, to share the poll with other users in a channel, the poll must be sent as a message. https://sendbird.com/docs/chat/v3/platform-api/message/polls/create-a-poll -----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_polls_post(title, options, async_req=True)
        >>> result = thread.get()

        Args:
            title (str):
            options ([str]):

        Keyword Args:
            api_token (str): [optional]
            v3_polls_get_request (V3PollsGetRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SendBirdPoll
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['title'] = \
            title
        kwargs['options'] = \
            options
        return self.v3_polls_post_endpoint.call_with_http_info(**kwargs)

