"""
    Sendbird Platform SDK

    Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@sendbird.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from sendbird_platform_sdk.api_client import ApiClient, Endpoint as _Endpoint
from sendbird_platform_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from sendbird_platform_sdk.model.create_a_bot_request import CreateABotRequest
from sendbird_platform_sdk.model.create_a_bot_response import CreateABotResponse
from sendbird_platform_sdk.model.join_channels_request import JoinChannelsRequest
from sendbird_platform_sdk.model.list_bots_response import ListBotsResponse
from sendbird_platform_sdk.model.send_a_bot_message_response import SendABotMessageResponse
from sendbird_platform_sdk.model.sendbird_extended_message_payload import SendbirdExtendedMessagePayload
from sendbird_platform_sdk.model.sendbird_group_channel_detail import SendbirdGroupChannelDetail
from sendbird_platform_sdk.model.sendbird_sorted_metaarray import SendbirdSortedMetaarray
from sendbird_platform_sdk.model.update_bot_by_id_data import UpdateBotByIdData
from sendbird_platform_sdk.model.update_bot_by_id_response import UpdateBotByIdResponse
from sendbird_platform_sdk.model.view_bot_by_id_response import ViewBotByIdResponse


class BotApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_a_bot_endpoint = _Endpoint(
            settings={
                'response_type': (CreateABotResponse,),
                'auth': [],
                'endpoint_path': '/v3/bots',
                'operation_id': 'create_a_bot',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'api_token',
                    'create_a_bot_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'api_token':
                        (str,),
                    'create_a_bot_request':
                        (CreateABotRequest,),
                },
                'attribute_map': {
                    'api_token': 'api-token',
                },
                'location_map': {
                    'api_token': 'header',
                    'create_a_bot_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_bot_by_id_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/v3/bots/{bot_userid}',
                'operation_id': 'delete_bot_by_id',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'bot_userid',
                    'api_token',
                ],
                'required': [
                    'bot_userid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bot_userid':
                        (str,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'bot_userid': 'bot_userid',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'bot_userid': 'path',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.join_channels_endpoint = _Endpoint(
            settings={
                'response_type': (SendbirdGroupChannelDetail,),
                'auth': [],
                'endpoint_path': '/v3/bots/{bot_userid}/channels',
                'operation_id': 'join_channels',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'bot_userid',
                    'api_token',
                    'join_channels_request',
                ],
                'required': [
                    'bot_userid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bot_userid':
                        (str,),
                    'api_token':
                        (str,),
                    'join_channels_request':
                        (JoinChannelsRequest,),
                },
                'attribute_map': {
                    'bot_userid': 'bot_userid',
                    'api_token': 'api-token',
                },
                'location_map': {
                    'bot_userid': 'path',
                    'api_token': 'header',
                    'join_channels_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.leave_a_group_channel_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/v3/bots/{bot_userid}/channels/{channel_url}',
                'operation_id': 'leave_a_group_channel',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'channel_url',
                    'bot_userid',
                    'api_token',
                ],
                'required': [
                    'channel_url',
                    'bot_userid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'channel_url':
                        (str,),
                    'bot_userid':
                        (str,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'channel_url': 'channel_url',
                    'bot_userid': 'bot_userid',
                    'api_token': 'api-token',
                },
                'location_map': {
                    'channel_url': 'path',
                    'bot_userid': 'path',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.leave_group_channels_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/v3/bots/{bot_userid}/channels',
                'operation_id': 'leave_group_channels',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'bot_userid',
                    'api_token',
                ],
                'required': [
                    'bot_userid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bot_userid':
                        (str,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'bot_userid': 'bot_userid',
                    'api_token': 'api-token',
                },
                'location_map': {
                    'bot_userid': 'path',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_bots_endpoint = _Endpoint(
            settings={
                'response_type': (ListBotsResponse,),
                'auth': [],
                'endpoint_path': '/v3/bots',
                'operation_id': 'list_bots',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'token',
                    'limit',
                    'api_token',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'token':
                        (str,),
                    'limit':
                        (int,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'token': 'token',
                    'limit': 'limit',
                    'api_token': 'api-token',
                },
                'location_map': {
                    'token': 'query',
                    'limit': 'query',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.send_a_bot_message_endpoint = _Endpoint(
            settings={
                'response_type': (SendABotMessageResponse,),
                'auth': [],
                'endpoint_path': '/v3/bots/{bot_userid}/send',
                'operation_id': 'send_a_bot_message',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'bot_userid',
                    'message_type',
                    'channel_url',
                    'api_token',
                    'message',
                    'mentioned',
                    'extended_message_payload',
                    'file',
                    'require_auth',
                    'mention_type',
                    'mentioned_user_ids',
                    'is_silent',
                    'sorted_metaarray',
                    'apns_bundle_id',
                    'apple_critical_alert_options',
                    'sound',
                    'volume',
                    'created_at',
                    'custom_type',
                    'data',
                    'dedup_id',
                    'mark_as_read',
                    'send_push',
                ],
                'required': [
                    'bot_userid',
                    'message_type',
                    'channel_url',
                ],
                'nullable': [
                ],
                'enum': [
                    'message_type',
                    'mention_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('message_type',): {

                        "MESG": "MESG",
                        "FILE": "FILE"
                    },
                    ('mention_type',): {

                        "USERS": "users",
                        "CHANNEL": "channel"
                    },
                },
                'openapi_types': {
                    'bot_userid':
                        (str,),
                    'message_type':
                        (str,),
                    'channel_url':
                        (str,),
                    'api_token':
                        (str,),
                    'message':
                        (str,),
                    'mentioned':
                        ([str],),
                    'extended_message_payload':
                        (SendbirdExtendedMessagePayload,),
                    'file':
                        (file_type,),
                    'require_auth':
                        (bool,),
                    'mention_type':
                        (str,),
                    'mentioned_user_ids':
                        ([str],),
                    'is_silent':
                        (bool,),
                    'sorted_metaarray':
                        (SendbirdSortedMetaarray,),
                    'apns_bundle_id':
                        (str,),
                    'apple_critical_alert_options':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                    'sound':
                        (str,),
                    'volume':
                        (float,),
                    'created_at':
                        (int,),
                    'custom_type':
                        (str,),
                    'data':
                        (str,),
                    'dedup_id':
                        (str,),
                    'mark_as_read':
                        (bool,),
                    'send_push':
                        (bool,),
                },
                'attribute_map': {
                    'bot_userid': 'bot_userid',
                    'message_type': 'message_type',
                    'channel_url': 'channel_url',
                    'api_token': 'api-token',
                    'message': 'message',
                    'mentioned': 'mentioned',
                    'extended_message_payload': 'extended_message_payload',
                    'file': 'file',
                    'require_auth': 'require_auth',
                    'mention_type': 'mention_type',
                    'mentioned_user_ids': 'mentioned_user_ids',
                    'is_silent': 'is_silent',
                    'sorted_metaarray': 'sorted_metaarray',
                    'apns_bundle_id': 'apns_bundle_id',
                    'apple_critical_alert_options': 'apple_critical_alert_options',
                    'sound': 'sound',
                    'volume': 'volume',
                    'created_at': 'created_at',
                    'custom_type': 'custom_type',
                    'data': 'data',
                    'dedup_id': 'dedup_id',
                    'mark_as_read': 'mark_as_read',
                    'send_push': 'send_push',
                },
                'location_map': {
                    'bot_userid': 'path',
                    'message_type': 'form',
                    'channel_url': 'form',
                    'api_token': 'header',
                    'message': 'form',
                    'mentioned': 'form',
                    'extended_message_payload': 'form',
                    'file': 'form',
                    'require_auth': 'form',
                    'mention_type': 'form',
                    'mentioned_user_ids': 'form',
                    'is_silent': 'form',
                    'sorted_metaarray': 'form',
                    'apns_bundle_id': 'form',
                    'apple_critical_alert_options': 'form',
                    'sound': 'form',
                    'volume': 'form',
                    'created_at': 'form',
                    'custom_type': 'form',
                    'data': 'form',
                    'dedup_id': 'form',
                    'mark_as_read': 'form',
                    'send_push': 'form',
                },
                'collection_format_map': {
                    'mentioned': 'csv',
                    'mentioned_user_ids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_bot_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (UpdateBotByIdResponse,),
                'auth': [],
                'endpoint_path': '/v3/bots/{bot_userid}',
                'operation_id': 'update_bot_by_id',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'bot_userid',
                    'api_token',
                    'update_bot_by_id_data',
                ],
                'required': [
                    'bot_userid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bot_userid':
                        (str,),
                    'api_token':
                        (str,),
                    'update_bot_by_id_data':
                        (UpdateBotByIdData,),
                },
                'attribute_map': {
                    'bot_userid': 'bot_userid',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'bot_userid': 'path',
                    'api_token': 'header',
                    'update_bot_by_id_data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.view_bot_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (ViewBotByIdResponse,),
                'auth': [],
                'endpoint_path': '/v3/bots/{bot_userid}',
                'operation_id': 'view_bot_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'bot_userid',
                    'api_token',
                ],
                'required': [
                    'bot_userid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bot_userid':
                        (str,),
                    'api_token':
                        (str,),
                },
                'attribute_map': {
                    'bot_userid': 'bot_userid',
                    'api_token': 'Api-Token',
                },
                'location_map': {
                    'bot_userid': 'path',
                    'api_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def create_a_bot(
        self,
        **kwargs
    ):
        """Create a bot  # noqa: E501

        ## Create a bot  Creates a new bot within an application. Creating a bot is similar to creating a normal user, except a callback URL should be specified for a bot to receive events.  > **Note**: The bot must first [join a group channel](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels) to interact with users. In group channels, you can also invite a bot through the [invite as members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel) action.      [https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot](https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_a_bot(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            api_token (str): [optional]
            create_a_bot_request (CreateABotRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateABotResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.create_a_bot_endpoint.call_with_http_info(**kwargs)

    def delete_bot_by_id(
        self,
        bot_userid,
        **kwargs
    ):
        """Delete a bot  # noqa: E501

        ## Delete a bot  Deletes a bot from an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-delete-a-bot ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_bot_by_id(bot_userid, async_req=True)
        >>> result = thread.get()

        Args:
            bot_userid (str):

        Keyword Args:
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['bot_userid'] = \
            bot_userid
        return self.delete_bot_by_id_endpoint.call_with_http_info(**kwargs)

    def join_channels(
        self,
        bot_userid,
        **kwargs
    ):
        """Join channels  # noqa: E501

        ## Join channels  Makes a bot join one or more group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.join_channels(bot_userid, async_req=True)
        >>> result = thread.get()

        Args:
            bot_userid (str): (Required) 

        Keyword Args:
            api_token (str): [optional]
            join_channels_request (JoinChannelsRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SendbirdGroupChannelDetail
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['bot_userid'] = \
            bot_userid
        return self.join_channels_endpoint.call_with_http_info(**kwargs)

    def leave_a_group_channel(
        self,
        channel_url,
        bot_userid,
        **kwargs
    ):
        """Leave channels - When leaving a specific channel  # noqa: E501

        ## Leave channels  Makes a bot leave a specific channel  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.leave_a_group_channel(channel_url, bot_userid, async_req=True)
        >>> result = thread.get()

        Args:
            channel_url (str):
            bot_userid (str): (Required) 

        Keyword Args:
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['channel_url'] = \
            channel_url
        kwargs['bot_userid'] = \
            bot_userid
        return self.leave_a_group_channel_endpoint.call_with_http_info(**kwargs)

    def leave_group_channels(
        self,
        bot_userid,
        **kwargs
    ):
        """Leave channels - When leaving all channels  # noqa: E501

        ## Leave channels  Makes a bot leave all group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.leave_group_channels(bot_userid, async_req=True)
        >>> result = thread.get()

        Args:
            bot_userid (str): (Required) 

        Keyword Args:
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['bot_userid'] = \
            bot_userid
        return self.leave_group_channels_endpoint.call_with_http_info(**kwargs)

    def list_bots(
        self,
        **kwargs
    ):
        """List bots  # noqa: E501

        ## List bots  Retrieves a list of all bots within an application.  https://sendbird.com/docs/chat/platform-api/v3/bot/listing-bots/list-bots#1-list-bots  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_bots(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            token (str): [optional]
            limit (int): [optional]
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ListBotsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.list_bots_endpoint.call_with_http_info(**kwargs)

    def send_a_bot_message(
        self,
        bot_userid,
        message_type,
        channel_url,
        **kwargs
    ):
        """Send a bot's message  # noqa: E501

        ## Send a bot message  Sends a bot message to a group channel.  [https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message](https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message)  `bot_userid`   Type: string   Description: Specifies the ID of the bot to send a message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_a_bot_message(bot_userid, message_type, channel_url, async_req=True)
        >>> result = thread.get()

        Args:
            bot_userid (str): (Required) 
            message_type (str): Specifies the type of message to send. MESG for text message, FILE for file message.
            channel_url (str): Specifies the URL of the channel to send the message to.

        Keyword Args:
            api_token (str): [optional]
            message (str): Specifies the content of the message. * This property is required when message_type is MESG.. [optional]
            mentioned ([str]): * This property is available when message_type is MESG.. [optional]
            extended_message_payload (SendbirdExtendedMessagePayload): [optional]
            file (file_type): When sending a single file with a message, specifies the data of the file to upload to the Sendbird server in raw binary format. When sending a request containing a file, change the value of the content-type header to multipart/form-data;boundary={your_unique_boundary_string} in the request. * This property is required when message_type is FILE. * This doesn't allow a converted base64-encoded string from a file as its value.. [optional]
            require_auth (bool): Determines whether to require an authentication key to verify if the file is being properly accessed. Only the user who uploaded the file or users who are in the channel where the file was uploaded should have access. The authentication key managed internally by the Sendbird system is generated every time a user logs in to the Sendbird server and is valid for three days starting from the last login. If set to false, Sendbird tries to access a file without any key. To access encrypted files, such as the files in the Sendbird server which are by default encrypted, the property must be set to true. (Default: false) The require_auth parameter only works if the file or URL is managed by Sendbird, which means that when you upload files using multipart format or provide URLs that point to the files hosted on the Sendbird server. However, if the file is hosted on a server or service that is not managed by Sendbird, access control and authentication for the file should be handled by the respective server or service hosting the file. * This property is available when message_type is FILE.. [optional]
            mention_type (str): * This property is available when message_type is FILE.. [optional]
            mentioned_user_ids ([str]): * This property is available when message_type is FILE.. [optional]
            is_silent (bool): * This property is available when message_type is FILE.. [optional]
            sorted_metaarray (SendbirdSortedMetaarray): [optional]
            apns_bundle_id (str): * This property is available when message_type is FILE.. [optional]
            apple_critical_alert_options ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): * This property is available when message_type is FILE.. [optional]
            sound (str): * This property is available when message_type is FILE.. [optional]
            volume (float): * This property is available when message_type is FILE.. [optional]
            created_at (int): [optional]
            custom_type (str): [optional]
            data (str): [optional]
            dedup_id (str): [optional]
            mark_as_read (bool): [optional]
            send_push (bool): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SendABotMessageResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['bot_userid'] = \
            bot_userid
        kwargs['message_type'] = \
            message_type
        kwargs['channel_url'] = \
            channel_url
        return self.send_a_bot_message_endpoint.call_with_http_info(**kwargs)

    def update_bot_by_id(
        self,
        bot_userid,
        **kwargs
    ):
        """Update a bot  # noqa: E501

        ## Update a bot  Updates information on a bot.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-update-a-bot ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_bot_by_id(bot_userid, async_req=True)
        >>> result = thread.get()

        Args:
            bot_userid (str):

        Keyword Args:
            api_token (str): [optional]
            update_bot_by_id_data (UpdateBotByIdData): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UpdateBotByIdResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['bot_userid'] = \
            bot_userid
        return self.update_bot_by_id_endpoint.call_with_http_info(**kwargs)

    def view_bot_by_id(
        self,
        bot_userid,
        **kwargs
    ):
        """View a bot  # noqa: E501

        ## View a bot  Retrieves information on a bot.  https://sendbird.com/docs/chat/v3/platform-api/guides/bot-interface#2-view-a-bot ----------------------------  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.view_bot_by_id(bot_userid, async_req=True)
        >>> result = thread.get()

        Args:
            bot_userid (str):

        Keyword Args:
            api_token (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ViewBotByIdResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['bot_userid'] = \
            bot_userid
        return self.view_bot_by_id_endpoint.call_with_http_info(**kwargs)

